{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"keylightd Documentation","text":"<p>Welcome to the keylightd API documentation. This guide provides comprehensive information about the keylightd API, which allows you to control Elgato Key Light devices programmatically.</p>"},{"location":"#what-is-keylightd","title":"What is keylightd?","text":"<p>keylightd is a daemon service that discovers, monitors, and controls Elgato Key Light devices on your network. It provides:</p> <ul> <li>A Unix socket interface for local control</li> <li>A REST API for remote control</li> <li>Group management for controlling multiple lights together</li> <li>API key authentication for secure access</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Light Control: Turn lights on/off, adjust brightness and color temperature</li> <li>Group Management: Create and manage groups of lights</li> <li>Discovery: Automatically find Key Light devices on your network</li> <li>Authentication: Secure API with key-based authentication</li> <li>Unix Socket: Local control without network overhead</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to keylightd, start with the Getting Started guide to learn how to install and configure the daemon.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>For detailed information about available endpoints, request/response formats, and authentication, see the API Reference.</p>"},{"location":"#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Control lighting for video conferencing</li> <li>Create scene presets for different recording environments</li> <li>Integrate with home automation systems</li> <li>Build custom control interfaces</li> <li>Script lighting changes for specific events</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Lights - Controlling individual lights</li> <li>Groups - Managing groups of lights</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For issues, feature requests, or contributions, please visit the GitHub repository.</p>"},{"location":"getting-started/","title":"Getting Started with keylightd","text":"<p>This guide will help you get started with keylightd, a daemon service for controlling Elgato Key Light devices and potentially other HTTP-based lights with similar interfaces. If you have a similar device that's not explicitly supported, please open a ticket to request support.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux or macOS operating system (basic testing has been performed on Windows and it should work.)</li> <li>Go 1.24 or higher (if building from source)</li> <li>Network connectivity to your Elgato Key Light devices</li> </ul>"},{"location":"getting-started/#option-1-install-via-homebrew-recommended","title":"Option 1: Install via Homebrew (Recommended)","text":"<p>The easiest way to install keylightd is through our Homebrew tap:</p> <pre><code>brew tap jmylchreest/keylightd\nbrew install keylightd\n</code></pre> <p>This will install both the <code>keylightd</code> daemon and <code>keylightctl</code> CLI tool. The installation automatically sets up a launchd service on macOS and a systemd service on Linux.</p> <p>To start the service: <pre><code>brew services start jmylchreest/keylightd/keylightd\n</code></pre></p> <p>Note: You can also run keylightd manually by simply executing <code>keylightd</code> in your terminal if you prefer not to use the system service.</p>"},{"location":"getting-started/#option-2-installing-from-binary-releases","title":"Option 2: Installing from Binary Releases","text":"<ol> <li>Download the latest release from the GitHub releases page</li> <li>Extract the archive:    <pre><code>tar -xzf keylightd-v*.tar.gz\n</code></pre></li> <li>Move the binary to a directory in your PATH:    <pre><code>sudo mv keylightd /usr/local/bin/\nchmod +x /usr/local/bin/keylightd\n</code></pre></li> </ol>"},{"location":"getting-started/#option-3-building-from-source","title":"Option 3: Building from Source","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/jmylchreest/keylightd.git\ncd keylightd\n</code></pre></p> </li> <li> <p>Build the binary:    <pre><code>go build -o keylightd ./cmd/keylightd\n</code></pre></p> </li> <li> <p>Install the binary:    <pre><code>sudo mv keylightd /usr/local/bin/\nchmod +x /usr/local/bin/keylightd\n</code></pre></p> </li> </ol> <p>Note: After installation, you can run keylightd manually by executing <code>keylightd</code> in your terminal.</p>"},{"location":"getting-started/#option-4-arch-linux-aur","title":"Option 4: Arch Linux (AUR)","text":"<p>You can install it via AUR on Arch (package name is <code>keylightd-bin</code>). Add your user to the keylightd group to access the socket via CLI:</p> <pre><code># Install via AUR helper (such as yay or paru)\nparu -S keylightd-bin\n\n# Add user to group for socket accss\nsudo usermod -a -G keylightd $USER\n\n# Enable and start the service\nsudo systemctl enable keylightd\nsudo systemctl start keylightd\n</code></pre> <p>Socket Permissions: The systemd service creates a Unix socket at <code>/run/keylightd/keylightd.sock</code> that is accessible by users in the <code>keylightd</code> group. This allows <code>keylightctl</code> to communicate with the daemon running as a system service.</p>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>keylightd uses a configuration file located at <code>~/.config/keylightd/keylightd.yaml</code>. The configuration file is created when settings are first saved, but you can also create it manually.</p>"},{"location":"getting-started/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code># Application state (automatically managed)\nstate:\n  api_keys:\n    - key: \"your-generated-api-key-here\"\n      name: \"my-api-key\"\n      created_at: \"2024-01-01T00:00:00Z\"\n      expires_at: \"2024-02-01T00:00:00Z\"\n      last_used_at: \"2024-01-15T12:00:00Z\"\n  groups:\n    group-123451:\n      id: \"group-123451\"\n      name: \"office-lights\"\n      lights:\n        - \"Elgato Key Light ABC1._elg._tcp.local.\"\n        - \"Elgato Key Light XYZ2._elg._tcp.local.\"\n\n# Configuration settings\nconfig:\n  # Server configuration\n  server:\n    # Unix socket path for local communication\n    unix_socket: \"/run/user/1000/keylightd.sock\"\n\n  # HTTP API configuration\n  api:\n    # Address and port for the HTTP API (default: :9123)\n    listen_address: \":9123\"\n\n  # Device discovery settings\n  discovery:\n    # How often to scan for new devices (seconds, default: 30)\n    interval: 30\n    # How often to check for offline devices (seconds, default: 180)\n    cleanup_interval: 180\n    # How long before marking a device as offline (seconds, default: 180)\n    cleanup_timeout: 180\n\n  # Logging configuration\n  logging:\n    # Log level: debug, info, warn, error (default: info)\n    level: info\n    # Log format: text, json (default: text)\n    format: text\n</code></pre>"},{"location":"getting-started/#creating-your-first-api-key","title":"Creating Your First API Key","text":"<p>Before using the HTTP API, you need to create an API key:</p> <pre><code>keylightctl api-key add my-first-key\n</code></pre> <p>This will generate a new API key that you can use to authenticate API requests.</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p>keylightd comes with a command-line interface for controlling lights:</p> <pre><code># List all discovered lights\nkeylightctl light list\n\n# Turn on a specific light\nkeylightctl light set \"Elgato Key Light ABC1._elg._tcp.local.\" on true\n\n# Change brightness\nkeylightctl light set \"Elgato Key Light ABC1._elg._tcp.local.\" brightness 50\n\n# Change color temperature\nkeylightctl light set \"Elgato Key Light ABC1._elg._tcp.local.\" temperature 4000\n</code></pre>"},{"location":"getting-started/#gnome-extension","title":"GNOME Extension","text":"<p>There is a GNOME extension available that allows you to control your lights directly from the GNOME desktop. You can download the extension from the GitHub releases page and install it using:</p> <pre><code>gnome-extensions install keylightd-control@jmylchreest.github.io.zip\n</code></pre> <p>After installation, enable the extension through GNOME Extensions or from the command line:</p> <pre><code>gnome-extensions enable keylightd-control@jmylchreest.github.io\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have keylightd up and running, you can:</p> <ul> <li>Explore light control options</li> <li>Create and manage light groups</li> <li>Review the complete API reference</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#lights-not-being-discovered","title":"Lights Not Being Discovered","text":"<ul> <li>Ensure your Key Lights are on the same network as your computer</li> <li>Check that mDNS/Bonjour is not blocked by your firewall</li> <li>Try running with debug logging: <code>keylightd --log-level debug</code></li> </ul>"},{"location":"getting-started/#connection-issues","title":"Connection Issues","text":"<ul> <li>Check that the Key Lights are powered on and connected to your network</li> <li>Verify network connectivity by pinging the light's IP address</li> <li>Ensure no firewall is blocking the connection</li> </ul>"},{"location":"getting-started/#socket-permission-issues","title":"Socket Permission Issues","text":"<p>If you get a \"permission denied\" error when using <code>keylightctl</code> with a systemd service:</p> <pre><code>Error: failed to connect to socket: dial unix /run/keylightd/keylightd.sock: connect: permission denied\n</code></pre> <p>This means your user doesn't have permission to access the daemon's socket. To fix this:</p> <ol> <li> <p>Add your user to the <code>keylightd</code> group:    <pre><code>sudo usermod -a -G keylightd $USER\n</code></pre></p> </li> <li> <p>Log out and back in for the group changes to take effect</p> </li> <li> <p>Verify you're in the group:    <pre><code>groups | grep keylightd\n</code></pre></p> </li> <li> <p>Check socket permissions:    <pre><code>ls -la /run/keylightd/keylightd.sock\n</code></pre></p> </li> </ol> <p>The socket should be owned by <code>keylightd:keylightd</code> with group write permissions.</p> <p>For more help, check the GitHub issues page or submit a new issue.</p>"},{"location":"socket-api/","title":"Unix Socket API","text":"<p>The keylightd daemon exposes a Unix socket interface for local control of Elgato Key Lights. This method is preferable for local automation scripts and command-line tooling, while the HTTP REST API is better suited for remote or web-based integrations.</p>"},{"location":"socket-api/#socket-location","title":"Socket Location","text":"<p>The Unix socket is located at: - <code>$XDG_RUNTIME_DIR/keylightd.sock</code> (default on most systems) - Or fallback to <code>/run/user/&lt;uid&gt;/keylightd.sock</code></p> <p>You can override this location in the configuration file or through the <code>--socket</code> command-line flag when starting keylightd.</p>"},{"location":"socket-api/#protocol-overview","title":"Protocol Overview","text":"<p>The API uses JSON for both request and response messages. Each request requires an <code>action</code> field specifying the operation to perform, and most operations require additional parameters.</p>"},{"location":"socket-api/#authentication","title":"Authentication","text":"<p>The Unix socket interface relies on Unix socket permissions for security. Only processes running as the same user as keylightd can access the socket, providing inherent security without additional authentication.</p>"},{"location":"socket-api/#general-response-format","title":"General Response Format","text":"<p>Successful responses have this structure:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"request-id-if-provided\",\n    // Additional data specific to the request\n}\n</code></pre> <p>Error responses look like this:</p> <pre><code>{\n    \"error\": \"Error message explaining what went wrong\",\n    \"id\": \"request-id-if-provided\"\n}\n</code></pre>"},{"location":"socket-api/#light-operations","title":"Light Operations","text":""},{"location":"socket-api/#list-lights","title":"List Lights","text":"<p>Retrieves all discovered lights.</p> <pre><code>// Request\n{\n    \"action\": \"list_lights\",\n    \"id\": \"optional-request-id\"\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"lights\": {\n        \"Elgato Key Light ABC1._elg._tcp.local.\": {\n            \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\",\n            \"productname\": \"Elgato Key Light\",\n            \"serialnumber\": \"ABC123456\",\n            \"firmwareversion\": \"1.0.3\",\n            \"firmwarebuild\": 194,\n            \"on\": true,\n            \"brightness\": 50,\n            \"temperature\": 5000,\n            \"ip\": \"192.168.1.100\",\n            \"port\": 9123,\n            \"lastseen\": \"2024-03-20T10:00:00Z\"\n        }\n    }\n}\n</code></pre>"},{"location":"socket-api/#get-light","title":"Get Light","text":"<p>Retrieves information about a specific light.</p> <pre><code>// Request\n{\n    \"action\": \"get_light\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"light\": {\n        \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\",\n        \"productname\": \"Elgato Key Light\",\n        \"serialnumber\": \"ABC123456\",\n        \"firmwareversion\": \"1.0.3\",\n        \"firmwarebuild\": 194,\n        \"on\": true,\n        \"brightness\": 50,\n        \"temperature\": 5000,\n        \"ip\": \"192.168.1.100\",\n        \"port\": 9123,\n        \"lastseen\": \"2024-03-20T10:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"socket-api/#set-light-state","title":"Set Light State","text":"<p>Changes properties of a specific light.</p> <pre><code>// Request\n{\n    \"action\": \"set_light_state\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\",\n        \"property\": \"on\",  // Can be \"on\", \"brightness\", or \"temperature\"\n        \"value\": true      // Boolean for \"on\", integer for others\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#light-properties","title":"Light Properties","text":"Property Type Valid Range Description <code>on</code> boolean <code>true</code> or <code>false</code> Power state of the light <code>brightness</code> integer 0-100 Brightness percentage <code>temperature</code> integer 2900-7000 Color temperature in Kelvin"},{"location":"socket-api/#group-operations","title":"Group Operations","text":""},{"location":"socket-api/#list-groups","title":"List Groups","text":"<p>Retrieves all configured light groups.</p> <pre><code>// Request\n{\n    \"action\": \"list_groups\",\n    \"id\": \"optional-request-id\"\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"groups\": {\n        \"group-123451\": {\n            \"id\": \"group-123451\",\n            \"name\": \"office\",\n            \"lights\": [\n                \"Elgato Key Light ABC1._elg._tcp.local.\",\n                \"Elgato Key Light XYZ2._elg._tcp.local.\"\n            ]\n        },\n        \"group-123452\": {\n            \"id\": \"group-123452\",\n            \"name\": \"office-left\",\n            \"lights\": [\n                \"Elgato Key Light ABC1._elg._tcp.local.\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"socket-api/#get-group","title":"Get Group","text":"<p>Retrieves information about a specific group.</p> <pre><code>// Request\n{\n    \"action\": \"get_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"group\": {\n        \"id\": \"group-123451\",\n        \"name\": \"Office Lights\",\n        \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]\n    }\n}\n</code></pre>"},{"location":"socket-api/#create-group","title":"Create Group","text":"<p>Creates a new light group.</p> <pre><code>// Request\n{\n    \"action\": \"create_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"name\": \"Office Lights\",\n        \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]  // Optional initial lights\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"group\": {\n        \"id\": \"group-123451\",\n        \"name\": \"Office Lights\",\n        \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]\n    }\n}\n</code></pre>"},{"location":"socket-api/#delete-group","title":"Delete Group","text":"<p>Deletes a light group.</p> <pre><code>// Request\n{\n    \"action\": \"delete_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#set-group-lights","title":"Set Group Lights","text":"<p>Updates the list of lights in a group.</p> <pre><code>// Request\n{\n    \"action\": \"set_group_lights\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\",\n        \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#set-group-state","title":"Set Group State","text":"<p>Changes a property for all lights in a group.</p> <pre><code>// Request\n{\n    \"action\": \"set_group_state\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\",\n        \"property\": \"on\",  // Can be \"on\", \"brightness\", or \"temperature\"\n        \"value\": true      // Boolean for \"on\", integer for others\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#api-key-operations","title":"API Key Operations","text":""},{"location":"socket-api/#list-api-keys","title":"List API Keys","text":"<p>Retrieves all configured API keys.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_list\",\n    \"id\": \"optional-request-id\"\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"keys\": [\n        {\n            \"key\": \"api-key-value\",\n            \"name\": \"My API Key\",\n            \"created_at\": \"2024-03-20T10:00:00Z\",\n            \"expires_at\": \"2024-03-21T10:00:00Z\",\n            \"last_used_at\": \"2024-03-20T10:00:00Z\",\n            \"disabled\": false\n        }\n    ]\n}\n</code></pre>"},{"location":"socket-api/#create-api-key","title":"Create API Key","text":"<p>Creates a new API key.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_add\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"name\": \"My New API Key\",\n        \"expires_in\": \"86400\"  // Optional: expiration in seconds\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"key\": {\n        \"key\": \"actual-key-value\",\n        \"name\": \"My New API Key\",\n        \"created_at\": \"2024-03-20T10:00:00Z\",\n        \"expires_at\": \"2024-03-21T10:00:00Z\",\n        \"last_used_at\": \"2024-03-20T10:00:00Z\",\n        \"disabled\": false\n    }\n}\n</code></pre>"},{"location":"socket-api/#delete-api-key","title":"Delete API Key","text":"<p>Deletes an API key.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_delete\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"key\": \"api-key-value\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#error-codes","title":"Error Codes","text":"<p>When an error occurs, you'll receive an error response with a descriptive message:</p> <pre><code>{\n    \"error\": \"Light not found: Elgato Key Light ABC1._elg._tcp.local.\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre> <p>Common error messages:</p> Error Message Description \"Invalid action\" The specified action doesn't exist \"Missing required parameter: X\" A required parameter is missing \"Light not found: Elgato Key Light ABC1._elg._tcp.local.\" The specified light doesn't exist \"Group not found: group-123451\" The specified group doesn't exist \"API key not found: X\" The specified API key doesn't exist \"Device unavailable\" The light device couldn't be reached \"Invalid input: X\" The provided input is invalid (e.g., brightness outside allowed range)"},{"location":"socket-api/#set-api-key-disabled-status","title":"Set API Key Disabled Status","text":"<p>Enable or disable an API key.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_set_disabled_status\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"key_or_name\": \"api-key-value or key-name\",\n        \"disabled\": \"true\"  // String \"true\" or \"false\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"key\": {\n        \"key\": \"api-key-value\",\n        \"name\": \"My API Key\",\n        \"created_at\": \"2024-03-20T10:00:00Z\",\n        \"expires_at\": \"2024-03-21T10:00:00Z\",\n        \"last_used_at\": \"2024-03-20T10:00:00Z\",\n        \"disabled\": true\n    }\n}\n</code></pre>"},{"location":"socket-api/#example-usage","title":"Example Usage","text":"<p>Here's an example using the <code>netcat</code> (<code>nc</code>) command to send a request to the socket:</p> <pre><code>echo '{\"action\": \"list_lights\"}' | nc -U /run/user/1000/keylightd.sock\n</code></pre> <p>Another example using Python:</p> <pre><code>import socket\nimport json\n\nsock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\nsock.connect('/run/user/1000/keylightd.sock')\n\nrequest = {\n    'action': 'set_light_state',\n    'data': {\n        'id': 'Elgato Key Light ABC1._elg._tcp.local.',\n        'property': 'on',\n        'value': True\n    }\n}\n\nsock.sendall(json.dumps(request).encode('utf-8'))\nresponse = sock.recv(4096).decode('utf-8')\nprint(json.loads(response))\nsock.close()\n</code></pre>"},{"location":"api/","title":"HTTP REST API","text":"<p>This section provides detailed information about the keylightd API endpoints, request/response formats, and authentication mechanisms.</p>"},{"location":"api/#overview","title":"Overview","text":"<p>The keylightd HTTP API provides comprehensive control over Elgato Key Light devices through standard REST endpoints. The API supports:</p> <ul> <li>Device discovery and status monitoring</li> <li>Individual light control (power, brightness, temperature)</li> <li>Group management for controlling multiple lights</li> <li>API key management for authentication</li> <li>Real-time device state synchronization</li> </ul>"},{"location":"api/#base-url","title":"Base URL","text":"<p>The API is available at: <pre><code>http://localhost:9123/api/v1\n</code></pre></p> <p>The default port is 9123, but this can be configured in the keylightd configuration file.</p>"},{"location":"api/#openapi-specification","title":"OpenAPI Specification","text":"<p>The keylightd API follows the OpenAPI 3.1.0 specification. You can explore the interactive documentation below or download the OpenAPI specification for use with other tools.</p>"},{"location":"assets/","title":"Assets Directory","text":"<p>This directory contains images, diagrams, and other assets used in the keylightd documentation.</p>"},{"location":"assets/#guidelines","title":"Guidelines","text":"<ul> <li>Use descriptive filenames that reflect the content</li> <li>Optimize images for web (compress PNGs, use appropriate resolution)</li> <li>Use SVG for diagrams where possible</li> <li>Group assets in subdirectories for better organization:</li> <li><code>/screenshots/</code> - UI screenshots</li> <li><code>/diagrams/</code> - Architecture and flow diagrams</li> <li><code>/icons/</code> - Icon assets</li> </ul>"},{"location":"assets/#usage","title":"Usage","text":"<p>When referencing assets in Markdown, use relative paths:</p> <pre><code>![API Architecture](../assets/diagrams/api-architecture.svg)\n</code></pre> <p>This ensures proper rendering both locally and when deployed.</p>"},{"location":"groups/cli/","title":"CLI Interface","text":"<p>This guide explains how to manage light groups using the <code>keylightctl</code> command-line tool.</p>"},{"location":"groups/cli/#creating-groups","title":"Creating Groups","text":"<p>Create a new group:</p> <pre><code>keylightctl group add my-group\n</code></pre> <p>You can also specify the name as a flag:</p> <pre><code>keylightctl group add --name my-group\n</code></pre> <p>Or without any arguments to be prompted interactively:</p> <pre><code>keylightctl group add\n</code></pre>"},{"location":"groups/cli/#listing-groups","title":"Listing Groups","text":"<p>View all groups:</p> <pre><code>keylightctl group list\n</code></pre> <p>For parseable output:</p> <pre><code>keylightctl group list --parseable\n</code></pre> <p>This shows all groups with their IDs, names, and member lights.</p>"},{"location":"groups/cli/#getting-group-information","title":"Getting Group Information","text":"<p>View the details of a specific group:</p> <pre><code>keylightctl group get GROUP_ID\n</code></pre> <p>For parseable output:</p> <pre><code>keylightctl group get GROUP_ID --parseable\n</code></pre>"},{"location":"groups/cli/#controlling-groups","title":"Controlling Groups","text":"<p>The basic syntax for setting group properties is:</p> <pre><code>keylightctl group set GROUP_ID PROPERTY VALUE\n</code></pre>"},{"location":"groups/cli/#power-control","title":"Power Control","text":"<p>Turn all lights in a group on:</p> <pre><code>keylightctl group set GROUP_ID on true\n</code></pre> <p>Turn all lights in a group off:</p> <pre><code>keylightctl group set GROUP_ID on false\n</code></pre> <p>You can also use \"on\" and \"off\" as values:</p> <pre><code>keylightctl group set GROUP_ID on on\nkeylightctl group set GROUP_ID on off\n</code></pre>"},{"location":"groups/cli/#brightness-control","title":"Brightness Control","text":"<p>Set brightness for all lights in a group (0-100):</p> <pre><code>keylightctl group set GROUP_ID brightness 80\n</code></pre>"},{"location":"groups/cli/#color-temperature-control","title":"Color Temperature Control","text":"<p>Set color temperature for all lights in a group in Kelvin (2900-7000):</p> <pre><code>keylightctl group set GROUP_ID temperature 4500\n</code></pre>"},{"location":"groups/cli/#modifying-group-membership","title":"Modifying Group Membership","text":"<p>Edit the lights in a group:</p> <pre><code>keylightctl group edit GROUP_ID light-1 light-2 light-3\n</code></pre> <p>This replaces all lights in the group with the specified lights.</p>"},{"location":"groups/cli/#deleting-groups","title":"Deleting Groups","text":"<p>Delete a group:</p> <pre><code>keylightctl group delete GROUP_ID\n</code></pre> <p>Skip the confirmation prompt:</p> <pre><code>keylightctl group delete GROUP_ID --yes\n</code></pre> <p>This removes the group but does not affect any lights.</p>"},{"location":"groups/cli/#interactive-mode","title":"Interactive Mode","text":"<p>If you don't provide all required arguments, <code>keylightctl</code> will prompt you interactively:</p> <pre><code># This will show you a list of groups to choose from\nkeylightctl group get\n\n# This will prompt for group, property, and value\nkeylightctl group set\n\n# This will prompt for group name\nkeylightctl group add\n</code></pre>"},{"location":"groups/cli/#group-properties","title":"Group Properties","text":"<p>Groups support the same control operations as individual lights:</p> <ul> <li>on: Power state (true/false, on/off)</li> <li>brightness: Brightness level (0-100)</li> <li>temperature: Color temperature in Kelvin (2900-7000)</li> </ul>"},{"location":"groups/cli/#examples","title":"Examples","text":"<p>Common usage patterns:</p> <pre><code># Create a group\nkeylightctl group add office-lights\n\n# List all groups\nkeylightctl group list\n\n# Get group info\nkeylightctl group get group-123451\n\n# Turn on all lights in a group at 80% brightness, warm temperature\nkeylightctl group set group-123451 on true\nkeylightctl group set group-123451 brightness 80\nkeylightctl group set group-123451 temperature 3200\n\n# Edit group membership\nkeylightctl group edit group-123451 \"Elgato Key Light ABC1._elg._tcp.local.\" \"Elgato Key Light XYZ2._elg._tcp.local.\"\n\n# Delete a group\nkeylightctl group delete group-123451\n</code></pre>"},{"location":"groups/cli/#group-ids","title":"Group IDs","text":"<p>Group IDs are typically in the format \"group-\" followed by a numeric identifier (e.g., \"group-123451\"). You can often use the group name as well for identification in some commands.</p>"},{"location":"groups/http/","title":"HTTP Interface","text":"<p>This guide explains how to manage light groups using the keylightd REST API.</p>"},{"location":"groups/http/#authentication","title":"Authentication","text":"<p>All HTTP API requests must include a valid API key using one of these methods:</p> <p>Method 1: HTTP Bearer Authentication (Recommended) <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" http://localhost:8080/api/v1/groups\n</code></pre></p> <p>Method 2: Custom Header <pre><code>curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8080/api/v1/groups\n</code></pre></p>"},{"location":"groups/http/#creating-groups","title":"Creating Groups","text":"<p>Create a new group:</p> <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"my-group\"}' \\\n  http://localhost:8080/api/v1/groups\n</code></pre> <p>Create a group with initial lights:</p> <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"my-group\", \"light_ids\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]}' \\\n  http://localhost:8080/api/v1/groups\n</code></pre> <p>Response format: <pre><code>{\n  \"id\": \"group-123451\",\n  \"name\": \"my-group\",\n  \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]\n}\n</code></pre></p>"},{"location":"groups/http/#listing-groups","title":"Listing Groups","text":"<p>List all groups:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/groups\n</code></pre> <p>Response format: <pre><code>{\n  \"group-123451\": {\n    \"id\": \"group-123451\",\n    \"name\": \"office-lights\",\n    \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]\n  },\n  \"group-123452\": {\n    \"id\": \"group-123452\",\n    \"name\": \"desk-lights\",\n    \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\"]\n  }\n}\n</code></pre></p>"},{"location":"groups/http/#getting-group-information","title":"Getting Group Information","text":"<p>Get details of a specific group:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/groups/GROUP_ID\n</code></pre> <p>Response format: <pre><code>{\n  \"id\": \"group-123451\",\n  \"name\": \"office-lights\",\n  \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]\n}\n</code></pre></p>"},{"location":"groups/http/#controlling-groups","title":"Controlling Groups","text":"<p>Set group state by sending a PUT request to the group's state endpoint:</p> <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true, \"brightness\": 75, \"temperature\": 3200}' \\\n  http://localhost:8080/api/v1/groups/GROUP_ID/state\n</code></pre> <p>You can include any combination of the following properties in the request body: - <code>on</code> (boolean): Power state - <code>brightness</code> (integer 0-100): Brightness level - <code>temperature</code> (integer 2900-7000): Color temperature in Kelvin</p> <p>Note: Unlike individual lights, the Unix socket API sets group properties individually, but the HTTP API can set multiple properties at once.</p>"},{"location":"groups/http/#power-control","title":"Power Control","text":"<p>Turn all lights in a group on: <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true}' \\\n  http://localhost:8080/api/v1/groups/GROUP_ID/state\n</code></pre></p> <p>Turn all lights in a group off: <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": false}' \\\n  http://localhost:8080/api/v1/groups/GROUP_ID/state\n</code></pre></p>"},{"location":"groups/http/#brightness-control","title":"Brightness Control","text":"<p>Set brightness for all lights in a group: <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"brightness\": 80}' \\\n  http://localhost:8080/api/v1/groups/GROUP_ID/state\n</code></pre></p>"},{"location":"groups/http/#color-temperature-control","title":"Color Temperature Control","text":"<p>Set color temperature for all lights in a group: <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"temperature\": 4500}' \\\n  http://localhost:8080/api/v1/groups/GROUP_ID/state\n</code></pre></p>"},{"location":"groups/http/#modifying-group-membership","title":"Modifying Group Membership","text":"<p>Update the lights in a group:</p> <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"light_ids\": [\"Elgato Key Light ABC1._elg._tcp.local.\", \"Elgato Key Light XYZ2._elg._tcp.local.\"]}' \\\n  http://localhost:8080/api/v1/groups/GROUP_ID/lights\n</code></pre> <p>This replaces all lights in the group with the specified lights.</p>"},{"location":"groups/http/#deleting-groups","title":"Deleting Groups","text":"<p>Delete a group:</p> <pre><code>curl -X DELETE \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/groups/GROUP_ID\n</code></pre> <p>This removes the group but does not affect any lights. Successful deletion returns HTTP 204 No Content with no response body.</p>"},{"location":"groups/http/#advanced-features","title":"Advanced Features","text":""},{"location":"groups/http/#multiple-group-identifiers","title":"Multiple Group Identifiers","text":"<p>You can use multiple group identifiers in a single request by separating them with commas:</p> <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true}' \\\n  \"http://localhost:8080/api/v1/groups/group-123451,office-lights/state\"\n</code></pre> <p>This will apply the settings to all matching groups, whether they're matched by ID or name. The server will deduplicate groups if the same group is matched by both ID and name.</p>"},{"location":"groups/http/#error-handling","title":"Error Handling","text":"<p>If an operation fails for some lights in a group but succeeds for others, the API will return a <code>207 Multi-Status</code> response with details about which operations failed.</p>"},{"location":"groups/http/#response-formats","title":"Response Formats","text":""},{"location":"groups/http/#success-response","title":"Success Response","text":"<p>Successful state changes return: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></p>"},{"location":"groups/http/#multi-status-response","title":"Multi-Status Response","text":"<p>Partial failures return: <pre><code>{\n  \"status\": \"partial\",\n  \"errors\": [\n    \"Failed to update light-2: device unavailable\"\n  ]\n}\n</code></pre></p>"},{"location":"groups/http/#error-responses","title":"Error Responses","text":"<p>Error responses include appropriate HTTP status codes with JSON error messages:</p> <pre><code>{\n  \"error\": \"Group not found\"\n}\n</code></pre> <p>Common status codes: - <code>200</code> - Success - <code>201</code> - Created (for new groups) - <code>204</code> - No Content (for deletions) - <code>207</code> - Multi-Status (partial success) - <code>400</code> - Bad Request (invalid parameters) - <code>401</code> - Unauthorized (invalid API key) - <code>404</code> - Group not found - <code>500</code> - Internal Server Error</p>"},{"location":"groups/http/#group-properties","title":"Group Properties","text":""},{"location":"groups/http/#controllable-properties","title":"Controllable Properties","text":"<ul> <li>on: Power state (boolean)</li> <li>brightness: Brightness level (integer 0-100)</li> <li>temperature: Color temperature in Kelvin (integer 2900-7000)</li> </ul>"},{"location":"groups/http/#group-information","title":"Group Information","text":"<ul> <li>id: Unique group identifier</li> <li>name: Human-readable group name</li> <li>lights: Array of light IDs in the group</li> </ul>"},{"location":"groups/socket/","title":"Groups - Unix Socket API","text":"<p>The keylightd Unix socket interface provides comprehensive group management capabilities for organizing and controlling multiple Elgato Key Lights simultaneously.</p>"},{"location":"groups/socket/#socket-location","title":"Socket Location","text":"<p>The Unix socket is located at: - <code>$XDG_RUNTIME_DIR/keylightd.sock</code> (default on most systems) - Or fallback to <code>/run/user/&lt;uid&gt;/keylightd.sock</code></p>"},{"location":"groups/socket/#authentication","title":"Authentication","text":"<p>The Unix socket interface relies on Unix socket permissions for security. Only processes running as the same user as keylightd can access the socket.</p>"},{"location":"groups/socket/#group-operations","title":"Group Operations","text":""},{"location":"groups/socket/#list-groups","title":"List Groups","text":"<p>Retrieves all configured light groups.</p> <p>Request: <pre><code>{\n    \"action\": \"list_groups\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"groups\": {\n        \"group-123451\": {\n            \"id\": \"group-123451\",\n            \"name\": \"office\",\n            \"lights\": [\n                \"Elgato Key Light ABC1._elg._tcp.local.\",\n                \"Elgato Key Light XYZ2._elg._tcp.local.\"\n            ]\n        },\n        \"group-123452\": {\n            \"id\": \"group-123452\",\n            \"name\": \"office-left\",\n            \"lights\": [\n                \"Elgato Key Light ABC1._elg._tcp.local.\"\n            ]\n        }\n    }\n}\n</code></pre></p>"},{"location":"groups/socket/#get-group","title":"Get Group","text":"<p>Retrieves information about a specific group.</p> <p>Request: <pre><code>{\n    \"action\": \"get_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\"\n    }\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"group\": {\n        \"id\": \"group-123451\",\n        \"name\": \"Office Lights\",\n        \"lights\": [\n            \"Elgato Key Light ABC1._elg._tcp.local.\",\n            \"Elgato Key Light XYZ2._elg._tcp.local.\"\n        ]\n    }\n}\n</code></pre></p>"},{"location":"groups/socket/#create-group","title":"Create Group","text":"<p>Creates a new light group.</p> <p>Request: <pre><code>{\n    \"action\": \"create_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"name\": \"Office Lights\",\n        \"lights\": [\n            \"Elgato Key Light ABC1._elg._tcp.local.\",\n            \"Elgato Key Light XYZ2._elg._tcp.local.\"\n        ]\n    }\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"group\": {\n        \"id\": \"group-123451\",\n        \"name\": \"Office Lights\",\n        \"lights\": [\n            \"Elgato Key Light ABC1._elg._tcp.local.\",\n            \"Elgato Key Light XYZ2._elg._tcp.local.\"\n        ]\n    }\n}\n</code></pre></p>"},{"location":"groups/socket/#delete-group","title":"Delete Group","text":"<p>Deletes a light group.</p> <p>Request: <pre><code>{\n    \"action\": \"delete_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\"\n    }\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre></p>"},{"location":"groups/socket/#set-group-lights","title":"Set Group Lights","text":"<p>Updates the list of lights in a group.</p> <p>Request: <pre><code>{\n    \"action\": \"set_group_lights\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\",\n        \"lights\": [\n            \"Elgato Key Light ABC1._elg._tcp.local.\",\n            \"Elgato Key Light XYZ2._elg._tcp.local.\"\n        ]\n    }\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre></p>"},{"location":"groups/socket/#set-group-state","title":"Set Group State","text":"<p>Changes a property for all lights in a group simultaneously.</p> <p>Request: <pre><code>{\n    \"action\": \"set_group_state\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-123451\",\n        \"property\": \"on\",\n        \"value\": true\n    }\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre></p>"},{"location":"groups/socket/#group-state-properties","title":"Group State Properties","text":"Property Type Valid Range Description <code>on</code> boolean <code>true</code> or <code>false</code> Power state for all lights in group <code>brightness</code> integer 0-100 Brightness percentage for all lights <code>temperature</code> integer 2900-7000 Color temperature in Kelvin for all lights"},{"location":"groups/socket/#example-usage","title":"Example Usage","text":""},{"location":"groups/socket/#using-netcat","title":"Using netcat","text":"<p>List all groups: <pre><code>echo '{\"action\": \"list_groups\"}' | nc -U /run/user/1000/keylightd.sock\n</code></pre></p> <p>Create a new group: <pre><code>echo '{\"action\": \"create_group\", \"data\": {\"name\": \"Desk Setup\", \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\"]}}' | nc -U /run/user/1000/keylightd.sock\n</code></pre></p> <p>Turn on all lights in a group: <pre><code>echo '{\"action\": \"set_group_state\", \"data\": {\"id\": \"group-123451\", \"property\": \"on\", \"value\": true}}' | nc -U /run/user/1000/keylightd.sock\n</code></pre></p>"},{"location":"groups/socket/#using-python","title":"Using Python","text":"<pre><code>import socket\nimport json\n\ndef send_socket_request(request):\n    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    sock.connect('/run/user/1000/keylightd.sock')\n\n    sock.sendall(json.dumps(request).encode('utf-8'))\n    response = sock.recv(4096).decode('utf-8')\n    sock.close()\n\n    return json.loads(response)\n\n# List all groups\ngroups = send_socket_request({\"action\": \"list_groups\"})\nprint(\"Groups:\", groups)\n\n# Create a new group\nnew_group = send_socket_request({\n    \"action\": \"create_group\",\n    \"data\": {\n        \"name\": \"Studio Lights\",\n        \"lights\": [\"Elgato Key Light ABC1._elg._tcp.local.\"]\n    }\n})\nprint(\"Created group:\", new_group)\n\n# Set brightness for all lights in group\nsend_socket_request({\n    \"action\": \"set_group_state\",\n    \"data\": {\n        \"id\": new_group[\"group\"][\"id\"],\n        \"property\": \"brightness\",\n        \"value\": 75\n    }\n})\n</code></pre>"},{"location":"groups/socket/#error-handling","title":"Error Handling","text":"<p>Common error responses when working with groups:</p> <pre><code>{\n    \"error\": \"Group not found: group-123456789\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre> <pre><code>{\n    \"error\": \"Light not found: invalid-light-id\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre> <pre><code>{\n    \"error\": \"Missing required parameter: name\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"lights/cli/","title":"CLI Interface","text":"<p>This guide explains how to control lights using the <code>keylightctl</code> command-line tool.</p>"},{"location":"lights/cli/#discovering-lights","title":"Discovering Lights","text":"<p>View all discovered lights:</p> <pre><code>keylightctl light list\n</code></pre> <p>For parseable output:</p> <pre><code>keylightctl light list --parseable\n</code></pre> <p>This shows all discovered lights with their IDs, names, IP addresses, and current state.</p>"},{"location":"lights/cli/#getting-light-information","title":"Getting Light Information","text":"<p>View the status of a specific light:</p> <pre><code>keylightctl light get LIGHT_ID\n</code></pre> <p>Get a specific property:</p> <pre><code>keylightctl light get LIGHT_ID on\nkeylightctl light get LIGHT_ID brightness\nkeylightctl light get LIGHT_ID temperature\n</code></pre> <p>For parseable output:</p> <pre><code>keylightctl light get LIGHT_ID --parseable\n</code></pre>"},{"location":"lights/cli/#controlling-lights","title":"Controlling Lights","text":"<p>The basic syntax for setting light properties is:</p> <pre><code>keylightctl light set LIGHT_ID PROPERTY VALUE\n</code></pre>"},{"location":"lights/cli/#power-control","title":"Power Control","text":"<p>Turn a light on:</p> <pre><code>keylightctl light set LIGHT_ID on true\n</code></pre> <p>Turn a light off:</p> <pre><code>keylightctl light set LIGHT_ID on false\n</code></pre> <p>You can also use \"on\" and \"off\" as values:</p> <pre><code>keylightctl light set LIGHT_ID on on\nkeylightctl light set LIGHT_ID on off\n</code></pre>"},{"location":"lights/cli/#brightness-control","title":"Brightness Control","text":"<p>Set brightness (0-100):</p> <pre><code>keylightctl light set LIGHT_ID brightness 75\nkeylightctl light set LIGHT_ID brightness 0\nkeylightctl light set LIGHT_ID brightness 100\n</code></pre>"},{"location":"lights/cli/#color-temperature-control","title":"Color Temperature Control","text":"<p>Set color temperature in Kelvin (2900-7000):</p> <pre><code>keylightctl light set LIGHT_ID temperature 4500\nkeylightctl light set LIGHT_ID temperature 2900  # Warm\nkeylightctl light set LIGHT_ID temperature 7000  # Cool\n</code></pre> <p>The CLI will automatically clamp values to the valid range and show you the conversion to mireds.</p>"},{"location":"lights/cli/#interactive-mode","title":"Interactive Mode","text":"<p>If you don't provide all required arguments, <code>keylightctl</code> will prompt you interactively:</p> <pre><code># This will show you a list of lights to choose from\nkeylightctl light get\n\n# This will prompt for light, property, and value\nkeylightctl light set\n</code></pre>"},{"location":"lights/cli/#light-properties","title":"Light Properties","text":"<p>Each Key Light has the following controllable properties:</p> <ul> <li>on: Power state (true/false, on/off)</li> <li>brightness: Brightness level (0-100)</li> <li>temperature: Color temperature in Kelvin (2900-7000)</li> </ul>"},{"location":"lights/cli/#examples","title":"Examples","text":"<p>Common usage patterns:</p> <pre><code># Get all lights\nkeylightctl light list\n\n# Get specific light info\nkeylightctl light get \"Elgato Key Light ABC1._elg._tcp.local.\"\n\n# Turn on a light at 80% brightness, warm temperature\nkeylightctl light set \"Elgato Key Light ABC1._elg._tcp.local.\" on true\nkeylightctl light set \"Elgato Key Light ABC1._elg._tcp.local.\" brightness 80\nkeylightctl light set \"Elgato Key Light ABC1._elg._tcp.local.\" temperature 3200\n\n# Turn off a light\nkeylightctl light set \"Elgato Key Light ABC1._elg._tcp.local.\" on false\n</code></pre>"},{"location":"lights/cli/#light-ids","title":"Light IDs","text":"<p>Light IDs are typically in the format <code>\"Elgato Key Light XXXX._elg._tcp.local.\"</code> where XXXX is a unique identifier. Use quotes around light IDs that contain spaces or special characters.</p> <p>You can also use the shortened form if it's unique enough to identify the light.</p>"},{"location":"lights/http/","title":"HTTP Interface","text":"<p>This guide explains how to control lights using the keylightd REST API.</p>"},{"location":"lights/http/#authentication","title":"Authentication","text":"<p>All HTTP API requests must include a valid API key using one of these methods:</p> <p>Method 1: HTTP Bearer Authentication (Recommended) <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" http://localhost:8080/api/v1/lights\n</code></pre></p> <p>Method 2: Custom Header <pre><code>curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8080/api/v1/lights\n</code></pre></p>"},{"location":"lights/http/#listing-lights","title":"Listing Lights","text":"<p>List all discovered lights:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/lights\n</code></pre> <p>Response format: <pre><code>{\n  \"lights\": {\n    \"Elgato Key Light ABC1._elg._tcp.local.\": {\n      \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\",\n      \"name\": \"Elgato Key Light\",\n      \"ip\": \"192.168.1.100\",\n      \"port\": 9123,\n      \"temperature\": 4500,\n      \"brightness\": 75,\n      \"on\": true,\n      \"productname\": \"Elgato Key Light\",\n      \"hardwareboardtype\": 2,\n      \"firmwareversion\": \"1.0.3\",\n      \"firmwarebuild\": 123,\n      \"serialnumber\": \"KL12345678\",\n      \"lastseen\": \"2023-08-15T14:30:45Z\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"lights/http/#getting-light-information","title":"Getting Light Information","text":"<p>Get a specific light:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local.\n</code></pre> <p>Response format: <pre><code>{\n  \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\",\n  \"name\": \"Elgato Key Light\",\n  \"ip\": \"192.168.1.100\",\n  \"port\": 9123,\n  \"temperature\": 4500,\n  \"brightness\": 75,\n  \"on\": true,\n  \"productname\": \"Elgato Key Light\",\n  \"hardwareboardtype\": 2,\n  \"firmwareversion\": \"1.0.3\",\n  \"firmwarebuild\": 123,\n  \"serialnumber\": \"KL12345678\",\n  \"lastseen\": \"2023-08-15T14:30:45Z\"\n}\n</code></pre></p>"},{"location":"lights/http/#controlling-lights","title":"Controlling Lights","text":"<p>Update light state by sending a POST request to the light's state endpoint:</p> <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true, \"brightness\": 80, \"temperature\": 3200}' \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local./state\n</code></pre> <p>You can include any combination of the following properties in the request body: - <code>on</code> (boolean): Power state - <code>brightness</code> (integer 0-100): Brightness level - <code>temperature</code> (integer 2900-7000): Color temperature in Kelvin</p>"},{"location":"lights/http/#power-control","title":"Power Control","text":"<p>Turn a light on: <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true}' \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local./state\n</code></pre></p> <p>Turn a light off: <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": false}' \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local./state\n</code></pre></p>"},{"location":"lights/http/#brightness-control","title":"Brightness Control","text":"<p>Set brightness to 75%: <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"brightness\": 75}' \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local./state\n</code></pre></p>"},{"location":"lights/http/#color-temperature-control","title":"Color Temperature Control","text":"<p>Set color temperature to 4500K: <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"temperature\": 4500}' \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local./state\n</code></pre></p>"},{"location":"lights/http/#multiple-properties","title":"Multiple Properties","text":"<p>Set multiple properties at once: <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true, \"brightness\": 80, \"temperature\": 3200}' \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local./state\n</code></pre></p>"},{"location":"lights/http/#response-formats","title":"Response Formats","text":""},{"location":"lights/http/#success-response","title":"Success Response","text":"<p>Successful state changes return: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></p>"},{"location":"lights/http/#error-responses","title":"Error Responses","text":"<p>Error responses include appropriate HTTP status codes with JSON error messages:</p> <pre><code>{\n  \"error\": \"Light not found\"\n}\n</code></pre> <p>Common status codes: - <code>200</code> - Success - <code>400</code> - Bad Request (invalid parameters) - <code>401</code> - Unauthorized (invalid API key) - <code>404</code> - Light not found - <code>500</code> - Internal Server Error</p>"},{"location":"lights/http/#light-properties","title":"Light Properties","text":""},{"location":"lights/http/#controllable-properties","title":"Controllable Properties","text":"<ul> <li>on: Power state (boolean)</li> <li>brightness: Brightness level (integer 0-100)</li> <li>temperature: Color temperature in Kelvin (integer 2900-7000)</li> </ul>"},{"location":"lights/http/#read-only-properties","title":"Read-only Properties","text":"<ul> <li>id: Unique light identifier</li> <li>name: Human-readable name</li> <li>ip: IP address of the light</li> <li>port: Port number (usually 9123)</li> <li>productname: Product name from the device</li> <li>hardwareboardtype: Hardware board type</li> <li>firmwareversion: Firmware version</li> <li>firmwarebuild: Firmware build number</li> <li>serialnumber: Device serial number</li> <li>lastseen: Timestamp when the light was last seen</li> </ul>"},{"location":"lights/http/#url-encoding","title":"URL Encoding","text":"<p>Light IDs often contain special characters and should be URL-encoded when used in URLs:</p> <pre><code># Original ID: Elgato Key Light ABC1._elg._tcp.local.\n# URL-encoded: Elgato%20Key%20Light%20ABC1._elg._tcp.local.\n\ncurl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/lights/Elgato%20Key%20Light%20ABC1._elg._tcp.local.\n</code></pre>"},{"location":"lights/socket/","title":"Socket Interface","text":"<p>This guide explains how to control lights using the keylightd Unix socket API.</p>"},{"location":"lights/socket/#authentication","title":"Authentication","text":"<p>The Unix socket interface relies on Unix socket permissions for security. Only processes running as the same user as keylightd can access the socket, providing inherent security without additional authentication.</p>"},{"location":"lights/socket/#socket-location","title":"Socket Location","text":"<p>The Unix socket is located at: - <code>$XDG_RUNTIME_DIR/keylightd.sock</code> (default on most systems) - Or fallback to <code>/run/user/&lt;uid&gt;/keylightd.sock</code></p>"},{"location":"lights/socket/#listing-lights","title":"Listing Lights","text":"<p>List all discovered lights:</p> <pre><code>echo '{\"action\": \"list_lights\"}' | nc -U /run/user/$(id -u)/keylightd.sock\n</code></pre> <p>Response format: <pre><code>{\n  \"status\": \"ok\",\n  \"lights\": {\n    \"Elgato Key Light ABC1._elg._tcp.local.\": {\n      \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\",\n      \"productname\": \"Elgato Key Light\",\n      \"serialnumber\": \"ABC123456\",\n      \"firmwareversion\": \"1.0.3\",\n      \"firmwarebuild\": 194,\n      \"on\": true,\n      \"brightness\": 50,\n      \"temperature\": 5000,\n      \"ip\": \"192.168.1.100\",\n      \"port\": 9123,\n      \"lastseen\": \"2024-03-20T10:00:00Z\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"lights/socket/#getting-light-information","title":"Getting Light Information","text":"<p>Get information about a specific light:</p> <pre><code>echo '{\"action\": \"get_light\", \"data\": {\"id\": \"LIGHT_ID\"}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n</code></pre> <p>Response format: <pre><code>{\n  \"status\": \"ok\",\n  \"light\": {\n    \"id\": \"Elgato Key Light ABC1._elg._tcp.local.\",\n    \"productname\": \"Elgato Key Light\",\n    \"serialnumber\": \"ABC123456\",\n    \"firmwareversion\": \"1.0.3\",\n    \"firmwarebuild\": 194,\n    \"on\": true,\n    \"brightness\": 50,\n    \"temperature\": 5000,\n    \"ip\": \"192.168.1.100\",\n    \"port\": 9123,\n    \"lastseen\": \"2024-03-20T10:00:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"lights/socket/#controlling-lights","title":"Controlling Lights","text":"<p>The Unix socket API requires setting properties individually, unlike the CLI and HTTP API which can set multiple properties at once.</p>"},{"location":"lights/socket/#power-control","title":"Power Control","text":"<p>Turn a light on:</p> <pre><code>echo '{\"action\": \"set_light_state\", \"data\": {\"id\": \"LIGHT_ID\", \"property\": \"on\", \"value\": true}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n</code></pre> <p>Turn a light off:</p> <pre><code>echo '{\"action\": \"set_light_state\", \"data\": {\"id\": \"LIGHT_ID\", \"property\": \"on\", \"value\": false}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n</code></pre>"},{"location":"lights/socket/#brightness-control","title":"Brightness Control","text":"<p>Set brightness (0-100):</p> <pre><code>echo '{\"action\": \"set_light_state\", \"data\": {\"id\": \"LIGHT_ID\", \"property\": \"brightness\", \"value\": 75}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n</code></pre>"},{"location":"lights/socket/#color-temperature-control","title":"Color Temperature Control","text":"<p>Set color temperature in Kelvin (2900-7000):</p> <pre><code>echo '{\"action\": \"set_light_state\", \"data\": {\"id\": \"LIGHT_ID\", \"property\": \"temperature\", \"value\": 4500}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n</code></pre>"},{"location":"lights/socket/#response-formats","title":"Response Formats","text":""},{"location":"lights/socket/#success-response","title":"Success Response","text":"<p>Successful operations return: <pre><code>{\n  \"status\": \"ok\"\n}\n</code></pre></p>"},{"location":"lights/socket/#error-responses","title":"Error Responses","text":"<p>Error responses include an error message: <pre><code>{\n  \"error\": \"Light not found: LIGHT_ID\"\n}\n</code></pre></p> <p>Common error messages: - \"Light not found: X\" - The specified light doesn't exist - \"Device unavailable\" - The light device couldn't be reached - \"Invalid input: X\" - The provided input is invalid (e.g., brightness outside 0-100 range) - \"Missing required parameter: X\" - A required parameter is missing</p>"},{"location":"lights/socket/#light-properties","title":"Light Properties","text":""},{"location":"lights/socket/#controllable-properties","title":"Controllable Properties","text":"<ul> <li>on: Power state (boolean true/false)</li> <li>brightness: Brightness level (integer 0-100)</li> <li>temperature: Color temperature in Kelvin (integer 2900-7000)</li> </ul>"},{"location":"lights/socket/#read-only-properties","title":"Read-only Properties","text":"<ul> <li>id: Unique light identifier</li> <li>productname: Product name from the device</li> <li>serialnumber: Device serial number</li> <li>firmwareversion: Firmware version</li> <li>firmwarebuild: Firmware build number</li> <li>ip: IP address of the light</li> <li>port: Port number (usually 9123)</li> <li>lastseen: Timestamp when the light was last seen</li> </ul>"},{"location":"lights/socket/#using-python","title":"Using Python","text":"<p>Here's an example using Python instead of netcat:</p> <pre><code>import socket\nimport json\n\nsock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\nsock.connect('/run/user/1000/keylightd.sock')\n\nrequest = {\n    'action': 'set_light_state',\n    'data': {\n        'id': 'Elgato Key Light ABC1._elg._tcp.local.',\n        'property': 'on',\n        'value': True\n    }\n}\n\nsock.sendall(json.dumps(request).encode('utf-8'))\nresponse = sock.recv(4096).decode('utf-8')\nresult = json.loads(response)\nprint(result)\nsock.close()\n</code></pre>"},{"location":"lights/socket/#request-format","title":"Request Format","text":"<p>All socket requests follow this format:</p> <pre><code>{\n  \"action\": \"action_name\",\n  \"id\": \"optional-request-id\",\n  \"data\": {\n    \"parameter1\": \"value1\",\n    \"parameter2\": \"value2\"\n  }\n}\n</code></pre> <p>The <code>id</code> field is optional and will be included in the response if provided.</p>"},{"location":"lights/socket/#multiple-property-changes","title":"Multiple Property Changes","text":"<p>To change multiple properties, you need to send separate requests for each property:</p> <pre><code># Turn on light and set brightness and temperature\necho '{\"action\": \"set_light_state\", \"data\": {\"id\": \"LIGHT_ID\", \"property\": \"on\", \"value\": true}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n\necho '{\"action\": \"set_light_state\", \"data\": {\"id\": \"LIGHT_ID\", \"property\": \"brightness\", \"value\": 80}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n\necho '{\"action\": \"set_light_state\", \"data\": {\"id\": \"LIGHT_ID\", \"property\": \"temperature\", \"value\": 3200}}' | \\\n  nc -U /run/user/$(id -u)/keylightd.sock\n</code></pre>"},{"location":"screenshots/gnome-extension/","title":"GNOME Extension Screenshots","text":"<p>The keylightd GNOME Extension provides a convenient way to control your Key Lights directly from your desktop environment. Below are screenshots showing the extension in action.</p>"},{"location":"screenshots/gnome-extension/#main-interface","title":"Main Interface","text":"Lights OnLights OffUI OverviewIndividual LightsLight GroupsSettingsAbout <p>The extension panel showing lights in the \"on\" state with brightness and color temperature controls visible.</p> <p></p> <p>The extension panel showing lights in the \"off\" state with simplified controls.</p> <p></p> <p>Complete view of the extension's user interface showing all available controls and options.</p> <p></p> <p>Detailed view of individual light controls for fine-tuning brightness and color temperature.</p> <p></p> <p>Group management interface for controlling multiple lights together as a single unit.</p> <p></p> <p>Configuration options and general settings for the extension.</p> <p></p> <p>Information about the extension including version details and links.</p>"},{"location":"screenshots/gnome-extension/#key-features-shown","title":"Key Features Shown","text":"<ul> <li>Quick Toggle: Easily turn all lights on/off from the top panel</li> <li>Individual Control: Adjust brightness and color temperature for each light</li> <li>Group Management: Control multiple lights as a group</li> <li>Settings: Configure extension behavior and connection settings</li> <li>Status Indicators: Visual feedback on light states and connectivity</li> </ul>"},{"location":"screenshots/gnome-extension/#installation","title":"Installation","text":"<p>The GNOME Extension can be installed:</p> <ol> <li>From the GNOME Extensions website</li> <li>From the GitHub releases page</li> <li>By building from source in the <code>contrib/gnome-extension</code> directory</li> </ol> <p>Make sure you have <code>keylightd</code> running before using the extension.</p>"},{"location":"supported-devices/","title":"Supported Devices","text":"<p>keylightd currently supports the following devices:</p>"},{"location":"supported-devices/#elgato-key-light-series","title":"Elgato Key Light Series","text":"<ul> <li>Elgato Key Light - The original professional lighting solution for content creators</li> <li>Elgato Key Light Air - Compact wireless version of the Key Light</li> </ul> <p>These devices are automatically discovered on your network using mDNS/Bonjour and can be controlled through keylightd's CLI, HTTP API, or Unix socket interface.</p>"},{"location":"supported-devices/#device-specific-information","title":"Device-Specific Information","text":"<p>For detailed technical information about supported devices, including API endpoints, data formats, and implementation notes:</p> <ul> <li>Elgato Key Light Series - Technical details and API specifications</li> </ul>"},{"location":"supported-devices/#adding-support-for-new-devices","title":"Adding Support for New Devices","text":"<p>If you have a similar HTTP-based lighting device that you'd like to see supported, please open an issue with:</p> <ul> <li>Device model and manufacturer</li> <li>Network discovery method (mDNS service type, if applicable)</li> <li>Available API endpoints and documentation</li> <li>Sample API requests and responses</li> </ul> <p>We welcome contributions to expand device compatibility!</p>"},{"location":"supported-devices/elgato/","title":"Elgato Key Light Series","text":""},{"location":"supported-devices/elgato/#temperature-control","title":"Temperature Control","text":"<p>The Elgato Key Light uses mireds (micro reciprocal degrees) for temperature control. Mireds are a unit of measurement used to express color temperature, calculated as:</p> <pre><code>mireds = 1,000,000 / Kelvin\n</code></pre> <p>The device accepts values in the range: - 344 mireds (2900K, warm) to 143 mireds (7000K, cool)</p>"},{"location":"supported-devices/elgato/#temperature-conversion-table","title":"Temperature Conversion Table","text":"Kelvin Mireds Description 2900K 344 Warm (incandescent) 3900K 256 Warm white 4950K 202 Neutral 5950K 168 Cool white 7000K 143 Cool (daylight) <p>When setting the temperature through the keylightd API: 1. The input Kelvin value is clamped to the valid range (2900K-7000K) 2. The clamped Kelvin value is converted to mireds using the formula above 3. The resulting mireds value is sent to the device</p> <p>For example: - Setting 2000K \u2192 clamped to 2900K \u2192 1,000,000/2900 = 344 mireds - Setting 8000K \u2192 clamped to 7000K \u2192 1,000,000/7000 = 143 mireds</p>"},{"location":"supported-devices/elgato/#brightness-control","title":"Brightness Control","text":"<p>The brightness is controlled as a percentage: - Range: 0-100% - Values below 0% are clamped to 0% - Values above 100% are clamped to 100%</p>"},{"location":"supported-devices/elgato/#power-control","title":"Power Control","text":"<p>The power state is controlled as a boolean: - <code>true</code> = On - <code>false</code> = Off</p>"},{"location":"supported-devices/elgato/#api-endpoints","title":"API Endpoints","text":"<p>The device exposes the following HTTP endpoints:</p> <ul> <li><code>GET /elgato/accessory-info</code> - Get device information</li> <li><code>GET /elgato/lights</code> - Get current light state</li> <li><code>PUT /elgato/lights</code> - Set light state</li> </ul>"},{"location":"supported-devices/elgato/#accessory-info-format","title":"Accessory Info Format","text":"<pre><code>{\n  \"productName\": \"Elgato Key Light\",\n  \"hardwareBoardType\": 53,\n  \"hardwareRevision\": \"1\",\n  \"macAddress\": \"XX:XX:XX:XX:XX:XX\",\n  \"firmwareBuildNumber\": 222,\n  \"firmwareVersion\": \"1.0.3\",\n  \"serialNumber\": \"CNXXXXXXXXXX\",\n  \"displayName\": \"Elgato Key Light XXXX\",\n  \"features\": [\"lights\"],\n  \"wifi-info\": {\n    \"ssid\": \"YourNetwork\",\n    \"frequencyMHz\": 2400,\n    \"rssi\": -41\n  }\n}\n</code></pre>"},{"location":"supported-devices/elgato/#light-state-format","title":"Light State Format","text":"<pre><code>{\n  \"numberOfLights\": 1,\n  \"lights\": [\n    {\n      \"on\": 1,           // 1 = on, 0 = off\n      \"brightness\": 60,  // 0-100\n      \"temperature\": 344 // 143-344 mireds\n    }\n  ]\n}\n</code></pre>"}]}