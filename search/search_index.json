{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"KeylightD Documentation","text":"<p>Welcome to the KeylightD API documentation. This guide provides comprehensive information about the KeylightD API, which allows you to control Elgato Key Light devices programmatically.</p>"},{"location":"#what-is-keylightd","title":"What is KeylightD?","text":"<p>KeylightD is a daemon service that discovers, monitors, and controls Elgato Key Light devices on your network. It provides:</p> <ul> <li>A Unix socket interface for local control</li> <li>A REST API for remote control</li> <li>Group management for controlling multiple lights together</li> <li>API key authentication for secure access</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Light Control: Turn lights on/off, adjust brightness and color temperature</li> <li>Group Management: Create and manage groups of lights</li> <li>Discovery: Automatically find Key Light devices on your network</li> <li>Authentication: Secure API with key-based authentication</li> <li>Unix Socket: Local control without network overhead</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to KeylightD, start with the Getting Started guide to learn how to install and configure the daemon.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>For detailed information about available endpoints, request/response formats, and authentication, see the API Reference.</p>"},{"location":"#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Control lighting for video conferencing</li> <li>Create scene presets for different recording environments</li> <li>Integrate with home automation systems</li> <li>Build custom control interfaces</li> <li>Script lighting changes for specific events</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Authentication - Learn how to authenticate with the API</li> <li>Lights - Controlling individual lights</li> <li>Groups - Managing groups of lights</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For issues, feature requests, or contributions, please visit the GitHub repository.</p>"},{"location":"authentication/","title":"Authentication","text":"<p>This guide explains how to authenticate with the KeylightD API using API keys.</p>"},{"location":"authentication/#api-key-authentication","title":"API Key Authentication","text":"<p>The KeylightD API uses API keys for authentication. All requests to the API must include a valid API key using one of these methods:</p>"},{"location":"authentication/#method-1-http-bearer-authentication-recommended","title":"Method 1: HTTP Bearer Authentication (Recommended)","text":"<p>Include the API key in the <code>Authorization</code> header with the <code>Bearer</code> prefix:</p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" http://localhost:8080/api/v1/lights\n</code></pre>"},{"location":"authentication/#method-2-custom-header","title":"Method 2: Custom Header","text":"<p>Alternatively, you can use the custom <code>X-API-Key</code> header:</p> <pre><code>curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8080/api/v1/lights\n</code></pre>"},{"location":"authentication/#managing-api-keys","title":"Managing API Keys","text":"<p>KeylightD provides commands for managing API keys through the <code>keylightctl</code> command-line interface.</p>"},{"location":"authentication/#creating-api-keys","title":"Creating API Keys","text":"<p>To create a new API key:</p> <pre><code>keylightctl api-key add my-key-name\n</code></pre> <p>You can also set an expiration time:</p> <pre><code># Create a key that expires in 30 days\nkeylightctl api-key add my-key-name 30d\n\n# Create a key that expires in 24 hours\nkeylightctl api-key add my-key-name 24h\n</code></pre> <p>When you create a key, the full key value will be displayed only once. Make sure to save it securely.</p>"},{"location":"authentication/#listing-api-keys","title":"Listing API Keys","text":"<p>To view all API keys:</p> <pre><code>keylightctl api-key list\n</code></pre> <p>This will show all keys with their names, creation dates, expiration dates, and disabled status, but it will not show the full key values for security reasons.</p>"},{"location":"authentication/#disabling-and-enabling-api-keys","title":"Disabling and Enabling API Keys","text":"<p>To disable an API key temporarily:</p> <pre><code>keylightctl api-key set-enabled YOUR_KEY_OR_NAME false\n</code></pre> <p>To re-enable a disabled key:</p> <pre><code>keylightctl api-key set-enabled YOUR_KEY_OR_NAME true\n</code></pre>"},{"location":"authentication/#deleting-api-keys","title":"Deleting API Keys","text":"<p>To permanently delete an API key:</p> <pre><code>keylightctl api-key delete YOUR_KEY\n</code></pre> <p>If you don't specify a key, you'll be shown a list of keys to choose from.</p>"},{"location":"authentication/#api-key-management-via-the-api","title":"API Key Management via the API","text":"<p>You can also manage API keys using the API itself. This is useful for integrations and automation.</p>"},{"location":"authentication/#creating-a-key-via-api","title":"Creating a Key via API","text":"<pre><code>curl -X POST \\\n  -H \"Authorization: Bearer EXISTING_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"new-api-key\", \"expires_in\": \"720h\"}' \\\n  http://localhost:8080/api/v1/apikeys\n</code></pre>"},{"location":"authentication/#listing-keys-via-api","title":"Listing Keys via API","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/apikeys\n</code></pre>"},{"location":"authentication/#disabling-a-key-via-api","title":"Disabling a Key via API","text":"<pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"disabled\": true}' \\\n  http://localhost:8080/api/v1/apikeys/KEY_TO_DISABLE/disabled\n</code></pre>"},{"location":"authentication/#deleting-a-key-via-api","title":"Deleting a Key via API","text":"<pre><code>curl -X DELETE \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/apikeys/KEY_TO_DELETE\n</code></pre>"},{"location":"authentication/#security-considerations","title":"Security Considerations","text":"<ul> <li>Store API keys securely and treat them as sensitive credentials</li> <li>Use HTTPS if exposing the API to the internet</li> <li>Create separate keys for different applications or users</li> <li>Set expiration times for keys used for temporary access</li> <li>Regularly audit and rotate API keys</li> <li>If a key is compromised, delete it immediately and create a new one</li> </ul>"},{"location":"authentication/#api-key-structure","title":"API Key Structure","text":"<p>API keys are random strings generated using a cryptographically secure random number generator. They cannot be recovered if lost - you'll need to create a new key.</p>"},{"location":"authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"authentication/#unauthorized-error","title":"Unauthorized Error","text":"<p>If you receive a <code>401 Unauthorized</code> error, check:</p> <ul> <li>That you're using the correct API key</li> <li>The key hasn't expired</li> <li>The key isn't disabled</li> <li>You're formatting the header correctly (check for typos)</li> </ul>"},{"location":"authentication/#api-key-not-working","title":"API Key Not Working","text":"<p>If your key suddenly stops working:</p> <ol> <li>List all keys to check if it's been disabled or expired</li> <li>Try creating a new key and use that instead</li> <li>Check the KeylightD logs for any authentication errors</li> </ol> <p>For persistent issues, check the server logs or run KeylightD with debug logging enabled:</p> <pre><code>keylightd --log-level debug\n</code></pre>"},{"location":"getting-started/","title":"Getting Started with KeylightD","text":"<p>This guide will help you get started with KeylightD, a daemon service for controlling Elgato Key Light devices and potentially other HTTP-based lights with similar interfaces. If you have a similar device that's not explicitly supported, please open a ticket to request support.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux operating system</li> <li>Go 1.24 or higher (if building from source)</li> <li>Network connectivity to your Elgato Key Light devices</li> </ul>"},{"location":"getting-started/#option-1-installing-from-binary-releases","title":"Option 1: Installing from Binary Releases","text":"<ol> <li>Download the latest release from the GitHub releases page</li> <li>Extract the archive:    <pre><code>tar -xzf keylightd-v*.tar.gz\n</code></pre></li> <li>Move the binary to a directory in your PATH:    <pre><code>sudo mv keylightd /usr/local/bin/\nchmod +x /usr/local/bin/keylightd\n</code></pre></li> </ol>"},{"location":"getting-started/#option-2-building-from-source","title":"Option 2: Building from Source","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/jmylchreest/keylightd.git\ncd keylightd\n</code></pre></p> </li> <li> <p>Build the binary:    <pre><code>go build -o keylightd ./cmd/keylightd\n</code></pre></p> </li> <li> <p>Install the binary:    <pre><code>sudo mv keylightd /usr/local/bin/\nchmod +x /usr/local/bin/keylightd\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>KeylightD uses a configuration file located at <code>~/.config/keylightd/config.yaml</code>. The file will be created automatically the first time you run KeylightD, but you can also create it manually.</p>"},{"location":"getting-started/#basic-configuration-example","title":"Basic Configuration Example","text":"<pre><code>server:\n  unix_socket: /tmp/keylightd.sock  # Unix socket path\napi:\n  listen_address: 127.0.0.1:8080    # HTTP API address and port\n  enable: true                       # Enable HTTP API\ndiscovery:\n  interval: 30                       # Discovery interval in seconds\n  cleanup_interval: 60               # Cleanup check interval in seconds\n  cleanup_timeout: 180               # Device timeout in seconds\nlogging:\n  level: info                        # Logging level (debug, info, warn, error)\n</code></pre>"},{"location":"getting-started/#running-keylightd","title":"Running KeylightD","text":""},{"location":"getting-started/#starting-manually","title":"Starting Manually","text":"<p>Run KeylightD in your terminal:</p> <pre><code>keylightd\n</code></pre> <p>You should see output indicating that the daemon has started and is discovering devices.</p>"},{"location":"getting-started/#setting-up-as-a-system-service","title":"Setting Up as a System Service","text":"<p>For persistent operation, it's recommended to set up KeylightD as a system service using systemd.</p> <ol> <li> <p>Create a service file:    <pre><code>sudo vi /etc/systemd/system/keylightd.service\n</code></pre></p> </li> <li> <p>Add the following content:    <pre><code>[Unit]\nDescription=KeylightD daemon for controlling Elgato Key Light devices\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/keylightd\nRestart=on-failure\nUser=YOUR_USERNAME  # Replace with your username\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> </li> <li> <p>Enable and start the service:    <pre><code>sudo systemctl enable keylightd\nsudo systemctl start keylightd\n</code></pre></p> </li> <li> <p>Check the service status:    <pre><code>sudo systemctl status keylightd\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#creating-your-first-api-key","title":"Creating Your First API Key","text":"<p>Before using the HTTP API, you need to create an API key:</p> <pre><code>keylightctl api-key add my-first-key\n</code></pre> <p>This will generate a new API key that you can use to authenticate API requests.</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#using-the-cli","title":"Using the CLI","text":"<p>KeylightD comes with a command-line interface for controlling lights:</p> <pre><code># List all discovered lights\nkeylightctl light list\n\n# Turn on a specific light\nkeylightctl light set --id light-1 --on\n\n# Change brightness\nkeylightctl light set --id light-1 --brightness 50\n\n# Change color temperature\nkeylightctl light set --id light-1 --temperature 4000\n</code></pre>"},{"location":"getting-started/#using-the-api","title":"Using the API","text":"<p>You can also use the HTTP API directly:</p> <pre><code># List all lights\ncurl -H \"Authorization: Bearer YOUR_API_KEY\" http://127.0.0.1:8080/api/v1/lights\n\n# Turn on a light\ncurl -X POST -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true}' \\\n  http://127.0.0.1:8080/api/v1/lights/light-1/state\n</code></pre> <p>See the API Reference for full details on all available endpoints.</p>"},{"location":"getting-started/#gnome-extension","title":"GNOME Extension","text":"<p>There is an experimental GNOME extension available that allows you to control your lights directly from the GNOME desktop. You can find it in the <code>contrib/gnome-extension</code> directory of the project.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have KeylightD up and running, you can:</p> <ul> <li>Learn about authentication</li> <li>Explore light control options</li> <li>Create and manage light groups</li> <li>Review the complete API reference</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#lights-not-being-discovered","title":"Lights Not Being Discovered","text":"<ul> <li>Ensure your Key Lights are on the same network as your computer</li> <li>Check that mDNS/Bonjour is not blocked by your firewall</li> <li>Try running with debug logging: <code>keylightd --log-level debug</code></li> </ul>"},{"location":"getting-started/#connection-issues","title":"Connection Issues","text":"<ul> <li>Check that the Key Lights are powered on and connected to your network</li> <li>Verify network connectivity by pinging the light's IP address</li> <li>Ensure no firewall is blocking the connection</li> </ul>"},{"location":"getting-started/#api-key-issues","title":"API Key Issues","text":"<ul> <li>If your API key isn't working, try creating a new one</li> <li>Check that you're including the key correctly in your requests</li> </ul> <p>For more help, check the GitHub issues page or submit a new issue.</p>"},{"location":"groups/","title":"Managing Light Groups","text":"<p>This guide explains how to create and manage groups of lights using KeylightD.</p>"},{"location":"groups/#what-are-light-groups","title":"What are Light Groups?","text":"<p>Groups allow you to control multiple lights together. This is particularly useful for:</p> <ul> <li>Setting up identical lighting for multiple lights in a room</li> <li>Creating scenes where all lights need to change together</li> <li>Simplifying control of complex lighting setups</li> </ul>"},{"location":"groups/#creating-groups","title":"Creating Groups","text":""},{"location":"groups/#creating-groups-via-cli","title":"Creating Groups via CLI","text":"<p>To create a new group using the command line:</p> <pre><code>keylightctl group create --name my-group --lights light-1,light-2\n</code></pre> <p>You can specify multiple light IDs as a comma-separated list.</p>"},{"location":"groups/#creating-groups-via-api","title":"Creating Groups via API","text":"<p>To create a group using the API:</p> <pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"my-group\", \"light_ids\": [\"light-1\", \"light-2\"]}' \\\n  http://localhost:8080/api/v1/groups\n</code></pre>"},{"location":"groups/#listing-groups","title":"Listing Groups","text":""},{"location":"groups/#listing-groups-via-cli","title":"Listing Groups via CLI","text":"<p>To list all groups:</p> <pre><code>keylightctl group list\n</code></pre> <p>This shows all groups with their IDs, names, and member lights.</p>"},{"location":"groups/#listing-groups-via-api","title":"Listing Groups via API","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/groups\n</code></pre>"},{"location":"groups/#getting-group-details","title":"Getting Group Details","text":""},{"location":"groups/#getting-group-details-via-cli","title":"Getting Group Details via CLI","text":"<p>To view the details of a specific group:</p> <pre><code>keylightctl group get --id group-1234\n</code></pre>"},{"location":"groups/#getting-group-details-via-api","title":"Getting Group Details via API","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/groups/group-1234\n</code></pre>"},{"location":"groups/#controlling-groups","title":"Controlling Groups","text":"<p>Groups support the same control operations as individual lights.</p>"},{"location":"groups/#setting-group-state-via-cli","title":"Setting Group State via CLI","text":"<p>Turn all lights in a group on:</p> <pre><code>keylightctl group set --id group-1234 --on\n</code></pre> <p>Set brightness for all lights in a group:</p> <pre><code>keylightctl group set --id group-1234 --brightness 80\n</code></pre> <p>Set color temperature for all lights in a group:</p> <pre><code>keylightctl group set --id group-1234 --temperature 4500\n</code></pre> <p>Combine multiple settings:</p> <pre><code>keylightctl group set --id group-1234 --on --brightness 75 --temperature 3200\n</code></pre>"},{"location":"groups/#setting-group-state-via-api","title":"Setting Group State via API","text":"<pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true, \"brightness\": 75, \"temperature\": 3200}' \\\n  http://localhost:8080/api/v1/groups/group-1234/state\n</code></pre>"},{"location":"groups/#modifying-group-membership","title":"Modifying Group Membership","text":""},{"location":"groups/#modifying-group-lights-via-cli","title":"Modifying Group Lights via CLI","text":"<p>To update the lights in a group:</p> <pre><code>keylightctl group set-lights --id group-1234 --lights light-1,light-3,light-4\n</code></pre> <p>This replaces all lights in the group with the specified lights.</p>"},{"location":"groups/#modifying-group-lights-via-api","title":"Modifying Group Lights via API","text":"<pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"light_ids\": [\"light-1\", \"light-3\", \"light-4\"]}' \\\n  http://localhost:8080/api/v1/groups/group-1234/lights\n</code></pre>"},{"location":"groups/#deleting-groups","title":"Deleting Groups","text":""},{"location":"groups/#deleting-groups-via-cli","title":"Deleting Groups via CLI","text":"<p>To delete a group:</p> <pre><code>keylightctl group delete --id group-1234\n</code></pre> <p>This removes the group but does not affect any lights.</p>"},{"location":"groups/#deleting-groups-via-api","title":"Deleting Groups via API","text":"<pre><code>curl -X DELETE \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/groups/group-1234\n</code></pre>"},{"location":"groups/#advanced-group-features","title":"Advanced Group Features","text":""},{"location":"groups/#multiple-group-identifiers","title":"Multiple Group Identifiers","text":"<p>When controlling groups via the API, you can use multiple group identifiers in a single request by separating them with commas:</p> <pre><code>curl -X PUT \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true}' \\\n  http://localhost:8080/api/v1/groups/group-1234,my-other-group/state\n</code></pre> <p>This will apply the settings to all matching groups, whether they're matched by ID or name.</p>"},{"location":"groups/#error-handling","title":"Error Handling","text":"<p>If an operation fails for some lights in a group but succeeds for others, the API will return a <code>207 Multi-Status</code> response with details about which operations failed.</p>"},{"location":"groups/#best-practices","title":"Best Practices","text":"<ul> <li>Use meaningful group names that describe the location or purpose</li> <li>Keep groups focused on specific functional areas</li> <li>Consider creating separate groups for different use cases even if they contain the same lights</li> <li>Use groups to standardize settings across multiple lights</li> </ul>"},{"location":"groups/#troubleshooting","title":"Troubleshooting","text":""},{"location":"groups/#group-command-not-affecting-all-lights","title":"Group Command Not Affecting All Lights","text":"<p>If a group command doesn't affect all lights:</p> <ol> <li>Check if all lights in the group are online using <code>keylightctl light list</code></li> <li>Verify the group's membership using <code>keylightctl group get</code></li> <li>Try sending commands to individual lights to see if they respond</li> </ol>"},{"location":"groups/#failed-group-operations","title":"Failed Group Operations","text":"<p>If a group operation fails:</p> <ol> <li>Check for error messages in the response</li> <li>Verify that all lights in the group are accessible</li> <li>Try with a simpler command (e.g., just turning the lights on)</li> </ol>"},{"location":"groups/#next-steps","title":"Next Steps","text":"<ul> <li>Read about controlling individual lights</li> <li>Review the API reference for detailed API documentation</li> </ul>"},{"location":"lights/","title":"Controlling Lights","text":"<p>This guide explains how to control individual Elgato Key Light devices using KeylightD.</p>"},{"location":"lights/#light-properties","title":"Light Properties","text":"<p>Each Key Light has the following controllable properties:</p> <ul> <li>Power State: Turn the light on or off</li> <li>Brightness: Adjust brightness from 0% (off) to 100% (maximum brightness)</li> <li>Color Temperature: Set the color temperature from 2900K (warm/yellow) to 7000K (cool/blue)</li> </ul>"},{"location":"lights/#discovering-lights","title":"Discovering Lights","text":"<p>KeylightD automatically discovers Elgato Key Light devices on your network using mDNS (Bonjour). You can view all discovered lights using the CLI:</p> <pre><code>keylightctl light list\n</code></pre> <p>This will show all discovered lights with their IDs, names, IP addresses, and current state.</p>"},{"location":"lights/#controlling-lights-via-cli","title":"Controlling Lights via CLI","text":"<p>The <code>keylightctl</code> command provides a simple interface for controlling lights.</p>"},{"location":"lights/#getting-light-status","title":"Getting Light Status","text":"<p>To view the status of a specific light:</p> <pre><code>keylightctl light get --id light-1\n</code></pre>"},{"location":"lights/#turning-lights-onoff","title":"Turning Lights On/Off","text":"<p>To turn a light on:</p> <pre><code>keylightctl light set --id light-1 --on\n</code></pre> <p>To turn a light off:</p> <pre><code>keylightctl light set --id light-1 --off\n</code></pre>"},{"location":"lights/#adjusting-brightness","title":"Adjusting Brightness","text":"<p>Set the brightness (0-100):</p> <pre><code>keylightctl light set --id light-1 --brightness 75\n</code></pre>"},{"location":"lights/#changing-color-temperature","title":"Changing Color Temperature","text":"<p>Set the color temperature in Kelvin (2900-7000):</p> <pre><code>keylightctl light set --id light-1 --temperature 4500\n</code></pre>"},{"location":"lights/#multiple-settings-at-once","title":"Multiple Settings at Once","text":"<p>You can combine multiple settings in a single command:</p> <pre><code>keylightctl light set --id light-1 --on --brightness 80 --temperature 3200\n</code></pre>"},{"location":"lights/#controlling-lights-via-api","title":"Controlling Lights via API","text":"<p>You can also control lights using the REST API directly.</p>"},{"location":"lights/#list-all-lights","title":"List All Lights","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/lights\n</code></pre>"},{"location":"lights/#get-a-specific-light","title":"Get a Specific Light","text":"<pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  http://localhost:8080/api/v1/lights/light-1\n</code></pre>"},{"location":"lights/#update-light-state","title":"Update Light State","text":"<pre><code>curl -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"on\": true, \"brightness\": 80, \"temperature\": 3200}' \\\n  http://localhost:8080/api/v1/lights/light-1/state\n</code></pre> <p>You can include any combination of the <code>on</code>, <code>brightness</code>, and <code>temperature</code> properties in the request body.</p>"},{"location":"lights/#light-states-and-device-information","title":"Light States and Device Information","text":"<p>When you retrieve a light's information, you'll receive detailed data about the device:</p> <pre><code>{\n  \"id\": \"light-1\",\n  \"name\": \"Elgato Key Light\",\n  \"ip\": \"192.168.1.100\",\n  \"port\": 9123,\n  \"temperature\": 4500,\n  \"brightness\": 75,\n  \"on\": true,\n  \"productname\": \"Elgato Key Light\",\n  \"hardwareboardtype\": 2,\n  \"firmwareversion\": \"1.0.3\",\n  \"firmwarebuild\": 123,\n  \"serialnumber\": \"KL12345678\",\n  \"lastseen\": \"2023-08-15T14:30:45Z\"\n}\n</code></pre>"},{"location":"lights/#handling-multiple-lights","title":"Handling Multiple Lights","text":"<p>To apply the same settings to multiple lights, consider creating a group.</p>"},{"location":"lights/#light-discovery-and-monitoring","title":"Light Discovery and Monitoring","text":"<p>KeylightD continuously monitors the network for new devices and tracks the online status of discovered lights. If a light becomes unavailable, it will be marked as such but kept in the list of known devices.</p> <p>The <code>lastseen</code> timestamp indicates when the light was last seen online.</p>"},{"location":"lights/#troubleshooting","title":"Troubleshooting","text":""},{"location":"lights/#light-not-responding","title":"Light Not Responding","text":"<p>If a light isn't responding to commands:</p> <ol> <li>Check if the light is powered on and connected to your network</li> <li>Verify that the light is discoverable using <code>keylightctl light list</code></li> <li>Try rebooting the light by turning it off and on again</li> <li>Check if the light is accessible via its web interface (http://LIGHT_IP:9123)</li> </ol>"},{"location":"lights/#wrong-settings-applied","title":"Wrong Settings Applied","text":"<p>If the wrong settings seem to be applied:</p> <ol> <li>Check the current state using <code>keylightctl light get</code></li> <li>Ensure you're using the correct light ID</li> <li>Try setting explicit values for all properties (on/off, brightness, temperature)</li> </ol>"},{"location":"lights/#light-not-discovered","title":"Light Not Discovered","text":"<p>If KeylightD isn't discovering your light:</p> <ol> <li>Ensure the light is on the same network as your KeylightD instance</li> <li>Check if your network allows mDNS/Bonjour traffic</li> <li>Verify the light is functioning correctly using the Elgato Control Center app</li> <li>Try restarting KeylightD with debug logging: <code>keylightd --log-level debug</code></li> </ol>"},{"location":"lights/#next-steps","title":"Next Steps","text":"<ul> <li>Create and manage groups to control multiple lights together</li> <li>Explore the API reference for detailed API documentation</li> </ul>"},{"location":"socket-api/","title":"Unix Socket API","text":"<p>The keylightd daemon exposes a Unix socket interface for local control of Elgato Key Lights. This method is preferable for local automation scripts and command-line tooling, while the HTTP REST API is better suited for remote or web-based integrations.</p>"},{"location":"socket-api/#socket-location","title":"Socket Location","text":"<p>The Unix socket is located at: - <code>$XDG_RUNTIME_DIR/keylightd.sock</code> (default on most systems) - Or fallback to <code>/run/user/&lt;uid&gt;/keylightd.sock</code></p> <p>You can override this location in the configuration file or through the <code>--socket</code> command-line flag when starting keylightd.</p>"},{"location":"socket-api/#protocol-overview","title":"Protocol Overview","text":"<p>The API uses JSON for both request and response messages. Each request requires an <code>action</code> field specifying the operation to perform, and most operations require additional parameters.</p>"},{"location":"socket-api/#authentication","title":"Authentication","text":"<p>The Unix socket interface relies on Unix socket permissions for security. Only processes running as the same user as keylightd can access the socket, providing inherent security without additional authentication.</p>"},{"location":"socket-api/#general-response-format","title":"General Response Format","text":"<p>Successful responses have this structure:</p> <pre><code>{\n    \"status\": \"ok\",\n    \"id\": \"request-id-if-provided\",\n    // Additional data specific to the request\n}\n</code></pre> <p>Error responses look like this:</p> <pre><code>{\n    \"error\": \"Error message explaining what went wrong\",\n    \"id\": \"request-id-if-provided\"\n}\n</code></pre>"},{"location":"socket-api/#light-operations","title":"Light Operations","text":""},{"location":"socket-api/#list-lights","title":"List Lights","text":"<p>Retrieves all discovered lights.</p> <pre><code>// Request\n{\n    \"action\": \"list_lights\",\n    \"id\": \"optional-request-id\"\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"lights\": {\n        \"light-id-1\": {\n            \"id\": \"light-id-1\",\n            \"productname\": \"Elgato Key Light\",\n            \"serialnumber\": \"ABC123456\",\n            \"firmwareversion\": \"1.0.3\",\n            \"firmwarebuild\": 194,\n            \"on\": true,\n            \"brightness\": 50,\n            \"temperature\": 5000,\n            \"ip\": \"192.168.1.100\",\n            \"port\": 9123,\n            \"lastseen\": \"2024-03-20T10:00:00Z\"\n        }\n    }\n}\n</code></pre>"},{"location":"socket-api/#get-light","title":"Get Light","text":"<p>Retrieves information about a specific light.</p> <pre><code>// Request\n{\n    \"action\": \"get_light\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"light-id-1\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"light\": {\n        \"id\": \"light-id-1\",\n        \"productname\": \"Elgato Key Light\",\n        \"serialnumber\": \"ABC123456\",\n        \"firmwareversion\": \"1.0.3\",\n        \"firmwarebuild\": 194,\n        \"on\": true,\n        \"brightness\": 50,\n        \"temperature\": 5000,\n        \"ip\": \"192.168.1.100\",\n        \"port\": 9123,\n        \"lastseen\": \"2024-03-20T10:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"socket-api/#set-light-state","title":"Set Light State","text":"<p>Changes properties of a specific light.</p> <pre><code>// Request\n{\n    \"action\": \"set_light_state\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"light-id-1\",\n        \"property\": \"on\",  // Can be \"on\", \"brightness\", or \"temperature\"\n        \"value\": true      // Boolean for \"on\", integer for others\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#light-properties","title":"Light Properties","text":"Property Type Valid Range Description <code>on</code> boolean <code>true</code> or <code>false</code> Power state of the light <code>brightness</code> integer 0-100 Brightness percentage <code>temperature</code> integer 2900-7000 Color temperature in Kelvin"},{"location":"socket-api/#group-operations","title":"Group Operations","text":""},{"location":"socket-api/#list-groups","title":"List Groups","text":"<p>Retrieves all configured light groups.</p> <pre><code>// Request\n{\n    \"action\": \"list_groups\",\n    \"id\": \"optional-request-id\"\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"groups\": {\n        \"group-1746907750613172530\": {\n            \"id\": \"group-1746907750613172530\",\n            \"name\": \"office\",\n            \"lights\": [\n                \"Elgato Key Light 1E2D._elg._tcp.local.\",\n                \"Elgato Key Light 218C._elg._tcp.local.\"\n            ]\n        },\n        \"group-1746947787717716493\": {\n            \"id\": \"group-1746947787717716493\",\n            \"name\": \"office-left\",\n            \"lights\": [\n                \"Elgato Key Light 1E2D._elg._tcp.local.\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"socket-api/#get-group","title":"Get Group","text":"<p>Retrieves information about a specific group.</p> <pre><code>// Request\n{\n    \"action\": \"get_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-1746907750613172530\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"group\": {\n        \"id\": \"group-1746907750613172530\",\n        \"name\": \"Office Lights\",\n        \"lights\": [\"light-id-1\", \"light-id-2\"]\n    }\n}\n</code></pre>"},{"location":"socket-api/#create-group","title":"Create Group","text":"<p>Creates a new light group.</p> <pre><code>// Request\n{\n    \"action\": \"create_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"name\": \"Office Lights\",\n        \"lights\": [\"light-id-1\", \"light-id-2\"]  // Optional initial lights\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"group\": {\n        \"id\": \"group-1746907750613172530\",\n        \"name\": \"Office Lights\",\n        \"lights\": [\"light-id-1\", \"light-id-2\"]\n    }\n}\n</code></pre>"},{"location":"socket-api/#delete-group","title":"Delete Group","text":"<p>Deletes a light group.</p> <pre><code>// Request\n{\n    \"action\": \"delete_group\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-1746907750613172530\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#set-group-lights","title":"Set Group Lights","text":"<p>Updates the list of lights in a group.</p> <pre><code>// Request\n{\n    \"action\": \"set_group_lights\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-1746907750613172530\",\n        \"lights\": [\"light-id-1\", \"light-id-2\"]\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#set-group-state","title":"Set Group State","text":"<p>Changes a property for all lights in a group.</p> <pre><code>// Request\n{\n    \"action\": \"set_group_state\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"id\": \"group-1746907750613172530\",\n        \"property\": \"on\",  // Can be \"on\", \"brightness\", or \"temperature\"\n        \"value\": true      // Boolean for \"on\", integer for others\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#api-key-operations","title":"API Key Operations","text":""},{"location":"socket-api/#list-api-keys","title":"List API Keys","text":"<p>Retrieves all configured API keys.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_list\",\n    \"id\": \"optional-request-id\"\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"keys\": [\n        {\n            \"key\": \"api-key-value\",\n            \"name\": \"My API Key\",\n            \"created_at\": \"2024-03-20T10:00:00Z\",\n            \"expires_at\": \"2024-03-21T10:00:00Z\",\n            \"last_used_at\": \"2024-03-20T10:00:00Z\",\n            \"disabled\": false\n        }\n    ]\n}\n</code></pre>"},{"location":"socket-api/#create-api-key","title":"Create API Key","text":"<p>Creates a new API key.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_add\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"name\": \"My New API Key\",\n        \"expires_in\": \"86400\"  // Optional: expiration in seconds\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"key\": {\n        \"key\": \"actual-key-value\",\n        \"name\": \"My New API Key\",\n        \"created_at\": \"2024-03-20T10:00:00Z\",\n        \"expires_at\": \"2024-03-21T10:00:00Z\",\n        \"last_used_at\": \"2024-03-20T10:00:00Z\",\n        \"disabled\": false\n    }\n}\n</code></pre>"},{"location":"socket-api/#delete-api-key","title":"Delete API Key","text":"<p>Deletes an API key.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_delete\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"key\": \"api-key-value\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre>"},{"location":"socket-api/#error-codes","title":"Error Codes","text":"<p>When an error occurs, you'll receive an error response with a descriptive message:</p> <pre><code>{\n    \"error\": \"Light not found: light-id-1\",\n    \"id\": \"optional-request-id\"\n}\n</code></pre> <p>Common error messages:</p> Error Message Description \"Invalid action\" The specified action doesn't exist \"Missing required parameter: X\" A required parameter is missing \"Light not found: X\" The specified light doesn't exist \"Group not found: X\" The specified group doesn't exist \"API key not found: X\" The specified API key doesn't exist \"Device unavailable\" The light device couldn't be reached \"Invalid input: X\" The provided input is invalid (e.g., brightness outside allowed range)"},{"location":"socket-api/#set-api-key-disabled-status","title":"Set API Key Disabled Status","text":"<p>Enable or disable an API key.</p> <pre><code>// Request\n{\n    \"action\": \"apikey_set_disabled_status\",\n    \"id\": \"optional-request-id\",\n    \"data\": {\n        \"key_or_name\": \"api-key-value or key-name\",\n        \"disabled\": \"true\"  // String \"true\" or \"false\"\n    }\n}\n\n// Response\n{\n    \"status\": \"ok\",\n    \"id\": \"optional-request-id\",\n    \"key\": {\n        \"key\": \"api-key-value\",\n        \"name\": \"My API Key\",\n        \"created_at\": \"2024-03-20T10:00:00Z\",\n        \"expires_at\": \"2024-03-21T10:00:00Z\",\n        \"last_used_at\": \"2024-03-20T10:00:00Z\",\n        \"disabled\": true\n    }\n}\n</code></pre>"},{"location":"socket-api/#example-usage","title":"Example Usage","text":"<p>Here's an example using the <code>netcat</code> (<code>nc</code>) command to send a request to the socket:</p> <pre><code>echo '{\"action\": \"list_lights\"}' | nc -U /run/user/1000/keylightd.sock\n</code></pre> <p>Another example using Python:</p> <pre><code>import socket\nimport json\n\nsock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\nsock.connect('/run/user/1000/keylightd.sock')\n\nrequest = {\n    'action': 'set_light_state',\n    'data': {\n        'id': 'Elgato Key Light 1E2D._elg._tcp.local.',\n        'property': 'on',\n        'value': True\n    }\n}\n\nsock.sendall(json.dumps(request).encode('utf-8'))\nresponse = sock.recv(4096).decode('utf-8')\nprint(json.loads(response))\nsock.close()\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>This section provides detailed information about the KeylightD API endpoints, request/response formats, and authentication mechanisms.</p>"},{"location":"api/#openapi-specification","title":"OpenAPI Specification","text":"<p>The KeylightD API follows the OpenAPI 3.1.0 specification. You can explore the interactive documentation below or download the OpenAPI specification for use with other tools.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>The API uses API keys for authentication. All API requests must include a valid API key using one of these methods:</p> <ul> <li>HTTP Bearer Authentication (preferred): <code>Authorization: Bearer YOUR_API_KEY</code></li> <li>Custom Header: <code>X-API-Key: YOUR_API_KEY</code></li> </ul> <p>For more details on API key management, see the Authentication guide.</p>"},{"location":"api/#response-format","title":"Response Format","text":"<p>All API responses are returned in JSON format. Successful responses typically include a <code>200 OK</code> status code along with the requested data.</p> <p>Error responses include an appropriate HTTP status code (4xx for client errors, 5xx for server errors) and a JSON body with an error message.</p> <p>Example error response:</p> <pre><code>{\n  \"error\": \"Light not found\"\n}\n</code></pre>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>The API implements rate limiting to prevent abuse. If you exceed the rate limit, you'll receive a <code>429 Too Many Requests</code> response. The response will include a <code>Retry-After</code> header indicating how long to wait before retrying.</p>"},{"location":"api/#api-versioning","title":"API Versioning","text":"<p>The current API version is v1, which is reflected in the base path: <code>/api/v1</code>. Future versions will use a different version identifier in the path.</p>"},{"location":"assets/","title":"Assets Directory","text":"<p>This directory contains images, diagrams, and other assets used in the KeylightD documentation.</p>"},{"location":"assets/#guidelines","title":"Guidelines","text":"<ul> <li>Use descriptive filenames that reflect the content</li> <li>Optimize images for web (compress PNGs, use appropriate resolution)</li> <li>Use SVG for diagrams where possible</li> <li>Group assets in subdirectories for better organization:</li> <li><code>/screenshots/</code> - UI screenshots</li> <li><code>/diagrams/</code> - Architecture and flow diagrams</li> <li><code>/icons/</code> - Icon assets</li> </ul>"},{"location":"assets/#usage","title":"Usage","text":"<p>When referencing assets in Markdown, use relative paths:</p> <pre><code>![API Architecture](../assets/diagrams/api-architecture.svg)\n</code></pre> <p>This ensures proper rendering both locally and when deployed.</p>"}]}