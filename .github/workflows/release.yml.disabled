name: Release

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed

jobs:
  check-test-status:
    name: Check Test Workflow Status
    runs-on: ubuntu-latest
    if: |
      false &&
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Check Test Status
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Test workflow has completed successfully."
            echo "Workflow run event: branch=${{ github.event.workflow_run.head_branch }}, commit=${{ github.event.workflow_run.head_sha }}"
          else
            echo "Direct workflow trigger. Proceeding with release."
          fi

  build-gnome-extension:
    name: Build GNOME extension
    needs: check-test-status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make zip

      - name: Build extension
        run: |
          cd contrib/gnome-extension
          make zip
          echo "Extension built successfully"
          echo "=== Checking what was created ==="
          find $(pwd)/../../dist -name "*gnome-extension*" -o -name "*.zip" | sort

      - name: Upload GNOME extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: gnome-extension
          path: dist/gnome-extension/*.zip
          retention-days: 1

  goreleaser:
    name: Run GoReleaser
    needs: build-gnome-extension
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.extract-version.outputs.VERSION }}
      CURRENT_TAG: ${{ steps.version.outputs.CURRENT_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Find previous and current versions
        id: version
        run: |
          # Get all tags
          git fetch --tags
          
          # List all tags for diagnostics
          echo "=== All tags (newest first) ==="
          git tag --sort=-v:refname
          
          # Find the current release tag (should be the tag that triggered this workflow)
          CURRENT_TAG="${GITHUB_REF_NAME}"
          if [ -z "$CURRENT_TAG" ] || [[ "$CURRENT_TAG" == *"SNAPSHOT"* ]]; then
            # Fallback to latest non-snapshot tag if needed
            CURRENT_TAG=$(git tag --sort=-v:refname | grep -v "SNAPSHOT" | head -n1)
          fi
          echo "Current tag: ${CURRENT_TAG}"
          
          # Find the previous release tag (non-snapshot, excluding current)
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -v "SNAPSHOT" | grep -v "^${CURRENT_TAG}$" | head -n1)
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG="v0.0.0"
          fi
          echo "Previous tag: ${PREVIOUS_TAG}"
          
          echo "PREVIOUS_TAG=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          echo "CURRENT_TAG=${CURRENT_TAG}" >> $GITHUB_OUTPUT

      - name: Debug GoReleaser environment
        run: |
          echo "=== GoReleaser Environment ==="
          echo "CURRENT_TAG: ${{ steps.version.outputs.CURRENT_TAG }}"
          echo "PREVIOUS_TAG: ${{ steps.version.outputs.PREVIOUS_TAG }}"

      - name: Download GNOME extension artifact
        uses: actions/download-artifact@v4
        with:
          name: gnome-extension
          path: dist/gnome-extension

      - name: Check for GNOME extension files
        run: |
          echo "=== Listing all directories ==="
          find . -type d | sort
          echo "=== Looking for gnome-extension files ==="
          find . -name "*gnome-extension*" -type d -o -name "*.zip" | sort

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --timeout 30m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ steps.version.outputs.CURRENT_TAG }}
          GORELEASER_PREVIOUS_TAG: ${{ steps.version.outputs.PREVIOUS_TAG }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract version information
        id: extract-version
        run: |
          echo "=== Content of metadata.json ==="
          cat ./dist/metadata.json

          # Extract version using jq and remove v prefix if present
          VERSION=$(jq -r .version ./dist/metadata.json | sed 's/^v//')
          echo "Extracted version (without v prefix): ${VERSION}"

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Final version: ${VERSION}"

  flatpak:
    name: Build Flatpak
    needs: goreleaser
    uses: ./.github/workflows/flatpak.yml
    with:
      tag_name: ${{ needs.goreleaser.outputs.CURRENT_TAG }}
      version: ${{ needs.goreleaser.outputs.VERSION }}
