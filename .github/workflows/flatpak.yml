name: Flatpak Build

on:
  workflow_call:
    inputs:
      tag_name:
        description: "The tag name for the release"
        required: true
        type: string
      version:
        description: "The version number"
        required: true
        type: string

jobs:
  flatpak:
    name: Build Flatpak for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Vendor Go modules
        run: |
          echo "=== Vendoring Go modules ==="
          go mod tidy
          go mod vendor

          echo "=== Vendor directory contents ==="
          ls -la vendor/ || echo "No vendor directory created"

          echo "=== Creating vendor archive ==="
          tar -czf vendor.tar.gz vendor/
          ls -la vendor.tar.gz

      - name: Calculate vendor archive hash
        id: vendor-hash
        run: |
          VENDOR_SHA256=$(sha256sum vendor.tar.gz | cut -d' ' -f1)
          echo "VENDOR_SHA256=${VENDOR_SHA256}" >> $GITHUB_OUTPUT
          echo "Vendor archive SHA256: ${VENDOR_SHA256}"

      - name: Calculate git commit hash
        id: git-info
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "Git commit hash: ${COMMIT_HASH}"
          echo "Build date: ${BUILD_DATE}"

      - name: Install jq for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate metainfo.xml with GitHub releases
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Fetch all releases (excluding prereleases)
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const validReleases = releases.data.filter(release => !release.prerelease);
            
            // Generate metainfo.xml content
            let metainfoContent = `<?xml version="1.0" encoding="UTF-8"?>
            <component type="desktop-application">
              <id>io.github.jmylchreest.keylightd</id>
              <name>Keylight Control</name>
              <summary>Control Elgato Key Lights and similar HTTP-based lighting devices</summary>
              <metadata_license>MIT</metadata_license>
              <project_license>MIT</project_license>
              <description>
                <p>
                  Keylight Control provides a daemon and command-line interface for managing Elgato Key Lights and similar HTTP-based lighting devices on your local network.
                </p>
                <p>
                  Features:
                </p>
                <ul>
                  <li>Automatic discovery of Elgato Key Lights via mDNS</li>
                  <li>Grouping of lights for batch control</li>
                  <li>HTTP REST API for remote control</li>
                  <li>Unix socket and CLI interface for local control</li>
                  <li>Configurable discovery interval and logging</li>
                </ul>
              </description>
              <launchable type="desktop-id">io.github.jmylchreest.keylightd.desktop</launchable>
              <icon type="stock">io.github.jmylchreest.keylightd</icon>
              <url type="homepage">https://github.com/jmylchreest/keylightd</url>
              <url type="bugtracker">https://github.com/jmylchreest/keylightd/issues</url>
              <developer_name>James Mylchreest</developer_name>
              <content_rating type="oars-1.1" />
              <releases>
            `;
            
            // Add releases
            for (const release of validReleases) {
              const version = release.tag_name.replace(/^v/, '');
              const date = release.published_at.split('T')[0];
              const name = release.name || `Release ${version}`;
              
              metainfoContent += `    <release version="${version}" date="${date}">
                <description>
                  <p>${name.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;')}</p>`;
              
              if (release.body && release.body.trim()) {
                // Clean and truncate release body
                const cleanBody = release.body
                  .replace(/&/g, '&amp;')
                  .replace(/</g, '&lt;')
                  .replace(/>/g, '&gt;')
                  .replace(/"/g, '&quot;')
                  .replace(/'/g, '&#39;')
                  .split('\n')
                  .slice(0, 5)
                  .join(' ')
                  .substring(0, 300);
                
                if (cleanBody.trim()) {
                  metainfoContent += `
                  <p>${cleanBody.trim()}</p>`;
                }
              }
              
              metainfoContent += `
                </description>
              </release>
            `;
            }
            
            metainfoContent += `  </releases>
              <screenshots>
                <screenshot type="default">
                  <caption>Controlling Key Lights via CLI</caption>
                  <image>https://raw.githubusercontent.com/jmylchreest/keylightd/main/docs/assets/screenshot.png</image>
                </screenshot>
              </screenshots>
            </component>`;
            
            // Write to file
            fs.writeFileSync('io.github.jmylchreest.keylightd.metainfo.xml', metainfoContent);
            console.log('Generated metainfo.xml with releases:', validReleases.length);

      - name: Create source archive
        run: |
          echo "=== Creating source archive ==="
          # Create a clean source archive without .git, including the generated metainfo.xml
          git config --global --add safe.directory "$(pwd)"
          git archive --format=tar.gz --prefix=keylightd-${{ inputs.version }}/ HEAD > source.tar.gz
          
          # Add the generated metainfo.xml to the archive
          tar --transform 's,^,keylightd-${{ inputs.version }}/,' -rf source.tar.gz io.github.jmylchreest.keylightd.metainfo.xml
          gzip -f source.tar
          ls -la source.tar.gz

      - name: Calculate source archive hash
        id: source-hash
        run: |
          SOURCE_SHA256=$(sha256sum source.tar.gz | cut -d' ' -f1)
          echo "SOURCE_SHA256=${SOURCE_SHA256}" >> $GITHUB_OUTPUT
          echo "Source archive SHA256: ${SOURCE_SHA256}"

      - name: Generate Flatpak manifest
        run: |
          cat > io.github.jmylchreest.keylightd.yml << 'EOF'
          app-id: io.github.jmylchreest.keylightd
          runtime: org.freedesktop.Platform
          runtime-version: "23.08"
          sdk: org.freedesktop.Sdk
          sdk-extensions:
            - org.freedesktop.Sdk.Extension.golang
          command: keylightctl
          finish-args:
            - --share=network
            - --socket=x11
            - --socket=wayland
            - --own-name=io.github.jmylchreest.keylightd
            - --filesystem=home
            - --talk-name=org.freedesktop.systemd1

          modules:
            - name: keylightd
              buildsystem: simple
              build-options:
                env:
                  - CGO_ENABLED=0
                  - GOPROXY=off
                  - GOFLAGS=-mod=vendor
                append-path: /usr/lib/sdk/golang/bin
              build-commands:
                # Extract vendor dependencies
                - tar -xzf vendor.tar.gz

                # Build keylightd binary
                - |
                  go build \
                    -ldflags="-s -w \
                      -X github.com/jmylchreest/keylightd/cmd/keylightd.version=${{ inputs.version }} \
                      -X github.com/jmylchreest/keylightd/cmd/keylightd.commit=${{ steps.git-info.outputs.COMMIT_HASH }} \
                      -X github.com/jmylchreest/keylightd/cmd/keylightd.buildDate=${{ steps.git-info.outputs.BUILD_DATE }}" \
                    -o keylightd ./cmd/keylightd

                # Build keylightctl binary
                - |
                  go build \
                    -ldflags="-s -w \
                      -X github.com/jmylchreest/keylightd/cmd/keylightctl.version=${{ inputs.version }} \
                      -X github.com/jmylchreest/keylightd/cmd/keylightctl.commit=${{ steps.git-info.outputs.COMMIT_HASH }} \
                      -X github.com/jmylchreest/keylightd/cmd/keylightctl.buildDate=${{ steps.git-info.outputs.BUILD_DATE }}" \
                    -o keylightctl ./cmd/keylightctl

                # Install binaries
                - install -Dm755 keylightd /app/bin/keylightd
                - install -Dm755 keylightctl /app/bin/keylightctl

                # Create default configuration directory
                - mkdir -p /app/share/keylightd

                # Install systemd user service file
                - install -Dm644 contrib/flatpak/io.github.jmylchreest.keylightd.service /app/share/systemd/user/io.github.jmylchreest.keylightd.service

                # Install desktop autostart file
                - install -Dm644 contrib/flatpak/io.github.jmylchreest.keylightd-autostart.desktop /app/share/applications/io.github.jmylchreest.keylightd-autostart.desktop

                # Install desktop entry
                - install -Dm644 contrib/flatpak/io.github.jmylchreest.keylightd.desktop /app/share/applications/io.github.jmylchreest.keylightd.desktop

                # Install icon
                - install -Dm644 contrib/gnome-extension/keylightd-control@jmylchreest.github.io/icons/hicolor/scalable/actions/light-enabled.svg /app/share/icons/hicolor/scalable/apps/io.github.jmylchreest.keylightd.svg

                # Install appstream metadata (using generated version)
                - install -Dm644 io.github.jmylchreest.keylightd.metainfo.xml /app/share/metainfo/io.github.jmylchreest.keylightd.metainfo.xml
              sources:
                - type: file
                  path: source.tar.gz
                  dest-filename: source.tar.gz
                - type: file
                  path: vendor.tar.gz
                  dest-filename: vendor.tar.gz
                - type: shell
                  commands:
                    - tar -xzf source.tar.gz --strip-components=1
          EOF

      - name: Install Flatpak and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y flatpak flatpak-builder
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          sudo flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08
          sudo flatpak install -y flathub org.freedesktop.Sdk.Extension.golang//23.08

      - name: Build Flatpak
        run: |
          echo "=== Building Flatpak ==="
          flatpak-builder --force-clean --repo=repo build-dir io.github.jmylchreest.keylightd.yml

          echo "=== Creating bundle ==="
          flatpak build-bundle repo io.github.jmylchreest.keylightd-${{ matrix.arch }}-${{ inputs.version }}.flatpak io.github.jmylchreest.keylightd

      - name: Upload Flatpak artifact
        uses: actions/upload-artifact@v4
        with:
          name: flatpak-${{ matrix.arch }}-${{ inputs.version }}
          path: io.github.jmylchreest.keylightd-${{ matrix.arch }}-${{ inputs.version }}.flatpak
          retention-days: 30

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag_name }}
          files: |
            io.github.jmylchreest.keylightd-${{ matrix.arch }}-${{ inputs.version }}.flatpak
            io.github.jmylchreest.keylightd.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
