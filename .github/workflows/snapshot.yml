name: Snapshot

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "**.md"
  workflow_dispatch:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches:
      - main

jobs:
  check-test-status:
    name: Check Test Workflow Status
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check Test Status
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Test workflow has completed successfully."
          else
            echo "Direct workflow trigger. Proceeding with snapshot."
          fi

  build-gnome-extension:
    name: Build GNOME extension
    runs-on: ubuntu-latest
    needs: check-test-status
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make zip

      - name: Build extension
        run: |
          cd contrib/gnome-extension
          make zip
          echo "Extension built successfully"
          echo "=== Checking what was created ==="
          find $(pwd)/../../dist -name "*gnome-extension*" -o -name "*.zip" | sort

      - name: Upload GNOME extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: gnome-extension
          path: dist/gnome-extension/*.zip
          retention-days: 1

  goreleaser:
    name: Run GoReleaser
    needs: build-gnome-extension
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.extract-version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Generate commit info
        id: commit-info
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)
          echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_OUTPUT
          echo "Commit hash: ${COMMIT_HASH}"
          echo "Commit message: ${COMMIT_MSG}"

      - name: Find previous and current versions
        id: version
        run: |
          # Get all tags
          git fetch --tags
          
          # List all tags for diagnostics
          echo "=== All tags (newest first) ==="
          git tag --sort=-v:refname
          
          # Find the latest release tag (non-snapshot)
          LATEST_RELEASE_TAG=$(git tag --sort=-v:refname | grep -v "SNAPSHOT" | head -n1)
          if [ -z "$LATEST_RELEASE_TAG" ]; then
            LATEST_RELEASE_TAG="v0.0.0"
          fi
          echo "Latest release tag: ${LATEST_RELEASE_TAG}"
          
          # Use this as our base version
          BASE_VERSION=${LATEST_RELEASE_TAG}
          echo "Using base version: ${BASE_VERSION}"
          
          # Get the previous tag for GoReleaser
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          if [[ "$PREVIOUS_TAG" == *"SNAPSHOT"* ]]; then
            # If previous tag is a snapshot, use latest release tag instead
            PREVIOUS_TAG=${LATEST_RELEASE_TAG}
          fi
          
          echo "PREVIOUS_TAG=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          echo "CURRENT_TAG=${BASE_VERSION}" >> $GITHUB_OUTPUT

      - name: Debug GoReleaser environment
        run: |
          echo "=== GoReleaser Environment ==="
          echo "CURRENT_TAG: ${{ steps.version.outputs.CURRENT_TAG }}"
          echo "PREVIOUS_TAG: ${{ steps.version.outputs.PREVIOUS_TAG }}"

      - name: Run GoReleaser snapshot
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "latest"
          args: release --clean --snapshot --timeout 30m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ steps.version.outputs.CURRENT_TAG }}
          GORELEASER_PREVIOUS_TAG: ${{ steps.version.outputs.PREVIOUS_TAG }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract version information
        id: extract-version
        run: |
          echo "=== Content of metadata.json ==="
          cat ./dist/metadata.json

          # Extract version using jq
          VERSION=$(jq -r .version ./dist/metadata.json | sed 's/^v//')
          echo "Extracted version (without v prefix): ${VERSION}"

          # Print debug info
          echo "Final version for release: ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        # This  gets used to tag the snapshot in the create release step
        # but if it has v* it'll do improper things with the workflow so dont include those

      - name: Download GNOME extension artifact
        uses: actions/download-artifact@v4
        with:
          name: gnome-extension
          path: dist/gnome-extension

      - name: Check for GNOME extension files
        run: |
          echo "=== Listing all directories ==="
          find . -type d | sort
          echo "=== Looking for gnome-extension files ==="
          find . -name "*gnome-extension*" -type d -o -name "*.zip" | sort

      - name: Debug GoReleaser output
        run: |
          echo "=== GoReleaser output directories ==="
          find ./dist -type d | sort

          echo "=== GoReleaser output files ==="
          find ./dist -type f | sort

          echo "=== GoReleaser artifacts.json content ==="
          if [ -f ./dist/artifacts.json ]; then
            jq . ./dist/artifacts.json
          else
            echo "artifacts.json not found"
          fi

          echo "=== GoReleaser metadata.json content ==="
          if [ -f ./dist/metadata.json ]; then
            jq . ./dist/metadata.json
          else
            echo "metadata.json not found"
          fi

          echo "=== GNOME extension files ==="
          find ./dist/gnome-extension -type f | sort

          echo "=== Archive contents ==="
          ls -la ./dist/*.tar.gz || echo "No archives found"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: "Snapshot ${{ steps.extract-version.outputs.VERSION }}"
          tag_name: "${{ steps.extract-version.outputs.VERSION }}"
          # Ensure this is always a prerelease and is clearly marked as a snapshot
          body: |
            Automated snapshot build from commit ${{ github.sha }}

            Commit message: ${{ steps.commit-info.outputs.COMMIT_MSG }}

            This is an automated snapshot build and is not intended for production use.
          files: |
            ./dist/*.tar.gz
            ./dist/gnome-extension/*.zip
          prerelease: true
          draft: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  flatpak:
    name: Build Flatpak
    needs: goreleaser
    uses: ./.github/workflows/flatpak.yml
    with:
      tag_name: ${{ needs.goreleaser.outputs.VERSION }}
      version: ${{ needs.goreleaser.outputs.VERSION }}
