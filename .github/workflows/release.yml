name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed

jobs:
  check-test-status:
    name: Check Test Workflow Status
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'workflow_run' || 
      (github.event.workflow_run.conclusion == 'success' && 
       (startsWith(github.event.workflow_run.head_branch, 'refs/tags/v') || 
        contains(github.event.workflow_run.head_branch, 'refs/tags/v')))
    steps:
      - name: Check Test Status
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Test workflow has completed successfully."
            echo "Workflow run event: branch=${{ github.event.workflow_run.head_branch }}, commit=${{ github.event.workflow_run.head_sha }}"
          else
            echo "Direct workflow trigger. Proceeding with release."
          fi

  build-gnome-extension:
    name: Build GNOME extension
    needs: check-test-status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make zip

      - name: Build extension
        run: |
          cd contrib/gnome-extension
          make zip
          echo "Extension built successfully"
          echo "=== Checking what was created ==="
          find $(pwd)/../../dist -name "*gnome-extension*" -o -name "*.zip" | sort

      - name: Upload GNOME extension artifact
        uses: actions/upload-artifact@v4
        with:
          name: gnome-extension
          path: dist/gnome-extension/*.zip
          retention-days: 1

  goreleaser:
    name: Run GoReleaser
    needs: build-gnome-extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --timeout 30m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download GNOME extension artifact
        uses: actions/download-artifact@v4
        with:
          name: gnome-extension
          path: dist/gnome-extension

      - name: Check for GNOME extension files
        run: |
          echo "=== Listing all directories ==="
          find . -type d | sort
          echo "=== Looking for gnome-extension files ==="
          find . -name "*gnome-extension*" -type d -o -name "*.zip" | sort

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: ./dist/gnome-extension/keylightd-control@jmylchreest.github.io.shell-extension.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  flatpak:
    name: Build Flatpak for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs: goreleaser
    strategy:
      matrix:
        arch: [amd64, arm64]
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-48
      options: --privileged
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Version Variables
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            # For workflow_run events, we need to determine if this was triggered by a tag
            if [[ "${{ github.event.workflow_run.head_branch }}" == *"refs/tags/v"* ]]; then
              # This was triggered by a tag push
              TAG_NAME=$(echo "${{ github.event.workflow_run.head_branch }}" | sed 's|.*/||')
              echo "Tag from workflow_run branch: ${TAG_NAME}"
            else
              # If the branch doesn't contain the tag info, try to get it from the commit
              git fetch --tags origin
              TAG_NAME=$(git tag --points-at ${{ github.event.workflow_run.head_sha }} | grep "^v" | head -1)
              
              if [ -z "$TAG_NAME" ]; then
                echo "No tag found for commit ${{ github.event.workflow_run.head_sha }}"
                exit 1
              fi
            fi
          else
            # For direct push or manual triggers
            TAG_NAME=${GITHUB_REF_NAME}
          fi
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "VERSION=${TAG_NAME#v}" >> $GITHUB_ENV
          echo "Using tag: ${TAG_NAME}, version: ${TAG_NAME#v}"

      - name: Download Binaries from Release
        run: |
          # Wait for release to be created (up to 30 seconds)
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" "https://github.com/${GITHUB_REPOSITORY}/releases/tag/${{ env.TAG_NAME }}" | grep -q "200"; then
              echo "Release found, continuing..."
              break
            fi
            echo "Waiting for release to be available... (attempt $i)"
            sleep 3
            if [ $i -eq 10 ]; then
              echo "Timed out waiting for release"
              exit 1
            fi
          done
          
          # Create directories
          mkdir -p extracted binaries
          
          # Download and extract binary for specified architecture
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            curl -sL "https://github.com/${GITHUB_REPOSITORY}/releases/download/${{ env.TAG_NAME }}/keylightd_${{ env.VERSION }}_linux_amd64.tar.gz" | tar -xz -C extracted
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            curl -sL "https://github.com/${GITHUB_REPOSITORY}/releases/download/${{ env.TAG_NAME }}/keylightd_${{ env.VERSION }}_linux_arm64.tar.gz" | tar -xz -C extracted
          else
            echo "Unsupported architecture: ${{ matrix.arch }}"
            exit 1
          fi
          
          # Copy and make executable
          cp extracted/keylightd binaries/
          cp extracted/keylightctl binaries/
          chmod +x binaries/keylightd
          chmod +x binaries/keylightctl
          ls -la binaries/

      - name: Update Flatpak Manifest
        run: |
          sed -i "s/tag: v1.0.0/tag: ${{ env.TAG_NAME }}/g" contrib/flatpak/io.github.jmylchreest.keylightd.yml

      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: keylightd-${{ env.VERSION }}-${{ matrix.arch }}.flatpak
          manifest-path: contrib/flatpak/io.github.jmylchreest.keylightd.yml
          cache-key: flatpak-builder-${{ github.sha }}-${{ matrix.arch }}
          arch: ${{ matrix.arch }}

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: keylightd-${{ env.VERSION }}-${{ matrix.arch }}.flatpak
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}