openapi: 3.1.0
info:
  title: keylightd API
  description: |
    API for controlling Elgato Key Light devices through the keylightd daemon.
    This API provides endpoints for managing lights, groups, and API keys.
  version: 1.0.0
  contact:
    name: keylightd
servers:
  - url: /api/v1
    description: Base API path

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        
    Light:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the light
        name:
          type: string
          description: Human-readable name of the light
        ip:
          type: string
          format: ipv4
          description: IP address of the light
        port:
          type: integer
          description: Port number of the light
        temperature:
          type: integer
          description: Color temperature in Kelvin (2900-7000)
        brightness:
          type: integer
          description: Brightness level (0-100)
        on:
          type: boolean
          description: Power state (true = on, false = off)
        productname:
          type: string
          description: Product name
        hardwareboardtype:
          type: integer
          description: Hardware board type
        firmwareversion:
          type: string
          description: Firmware version
        firmwarebuild:
          type: integer
          description: Firmware build number
        serialnumber:
          type: string
          description: Serial number of the device
        lastseen:
          type: string
          format: date-time
          description: Timestamp when the light was last seen
      required:
        - id
        - name
        - ip
        - temperature
        - brightness
        - on
        - lastseen

    LightState:
      type: object
      properties:
        on:
          type: boolean
          nullable: true
          description: Power state (true = on, false = off)
        brightness:
          type: integer
          nullable: true
          description: Brightness level (0-100)
        temperature:
          type: integer
          nullable: true
          description: Color temperature in Kelvin (2900-7000)

    Group:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the group
        name:
          type: string
          description: Human-readable name of the group
        lights:
          type: array
          description: Array of light IDs in this group
          items:
            type: string
      required:
        - id
        - name
        - lights

    GroupCreate:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name for the group
        light_ids:
          type: array
          description: Array of light IDs to include in the group
          items:
            type: string
      required:
        - name

    GroupSetLights:
      type: object
      properties:
        light_ids:
          type: array
          description: Array of light IDs to include in the group
          items:
            type: string
      required:
        - light_ids

    APIKey:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the API key
        name:
          type: string
          description: Human-readable name of the API key
        key:
          type: string
          description: The API key value (only returned upon creation)
        created_at:
          type: string
          format: date-time
          description: When the API key was created
        expires_at:
          type: string
          format: date-time
          description: When the API key expires (null if never)
      required:
        - id
        - name
        - created_at

    APIKeyCreate:
      type: object
      properties:
        name:
          type: string
          description: Human-readable name for the API key
        expires_in:
          type: string
          description: Duration string like "720h", "30d", or empty for never
      required:
        - name

    APIKeyDisableRequest:
      type: object
      properties:
        disabled:
          type: boolean
          description: Whether the API key should be disabled or enabled
      required:
        - disabled

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /lights:
    get:
      summary: List all discovered lights
      description: Returns a list of all Elgato Key Light devices that have been discovered
      operationId: listLights
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  lights:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/Light'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lights/{id}:
    get:
      summary: Get a specific light
      description: Returns details about a specific Elgato Key Light device
      operationId: getLight
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the light to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Light'
        '404':
          description: Light not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lights/{id}/state:
    post:
      summary: Set light state
      description: Update the state of a specific light
      operationId: setLightState
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the light to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LightState'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Light not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to set light state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups:
    get:
      summary: List all groups
      description: Returns a list of all light groups
      operationId: listGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new group
      description: Create a new group of lights
      operationId: createGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{id}:
    get:
      summary: Get a specific group
      description: Returns details about a specific light group
      operationId: getGroup
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the group to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a group
      description: Delete a specific light group
      operationId: deleteGroup
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the group to delete
          schema:
            type: string
      responses:
        '204':
          description: Group deleted successfully
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{id}/lights:
    put:
      summary: Set group lights
      description: Update the lights in a specific group
      operationId: setGroupLights
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the group to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupSetLights'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group or light not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to set group lights
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{id}/state:
    put:
      summary: Set group state
      description: |
        Update the state of all lights in a specific group.
        The id parameter can be a single group ID, a group name, or a comma-separated list of IDs and names.
      operationId: setGroupState
      parameters:
        - name: id
          in: path
          required: true
          description: Group ID, name, or comma-separated list (e.g., "office" or "group-1,office")
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LightState'
      responses:
        '200':
          description: All operations successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
        '207':
          description: Partial success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [partial]
                  errors:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No groups found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /apikeys:
    get:
      summary: List all API keys
      description: Returns a list of all API keys (without the actual key values)
      operationId: listAPIKeys
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new API key
      description: Create a new API key for authentication
      operationId: createAPIKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKeyCreate'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to create API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /apikeys/{key}:
    delete:
      summary: Delete an API key
      description: Delete a specific API key by its value
      operationId: deleteAPIKey
      parameters:
        - name: key
          in: path
          required: true
          description: API key to delete
          schema:
            type: string
      responses:
        '204':
          description: API key deleted successfully
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to delete API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /apikeys/{key}/disabled:
    put:
      summary: Set API key disabled status
      description: Enable or disable a specific API key
      operationId: setAPIKeyDisabledStatus
      parameters:
        - name: key
          in: path
          required: true
          description: API key or name to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKeyDisableRequest'
      responses:
        '200':
          description: API key status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Failed to update API key status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'